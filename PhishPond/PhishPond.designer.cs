#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3620
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PhishPond.Repository.LinqToSql
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="PhishPond")]
	public partial class PhishDatabase : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertShow(PhishPond.Concrete.Show instance);
    partial void UpdateShow(PhishPond.Concrete.Show instance);
    partial void DeleteShow(PhishPond.Concrete.Show instance);
    partial void InsertSong(PhishPond.Concrete.Song instance);
    partial void UpdateSong(PhishPond.Concrete.Song instance);
    partial void DeleteSong(PhishPond.Concrete.Song instance);
    partial void InsertSet(PhishPond.Concrete.Set instance);
    partial void UpdateSet(PhishPond.Concrete.Set instance);
    partial void DeleteSet(PhishPond.Concrete.Set instance);
    partial void InsertTour(PhishPond.Concrete.Tour instance);
    partial void UpdateTour(PhishPond.Concrete.Tour instance);
    partial void DeleteTour(PhishPond.Concrete.Tour instance);
    partial void InsertPhoto(PhishPond.Concrete.Photo instance);
    partial void UpdatePhoto(PhishPond.Concrete.Photo instance);
    partial void DeletePhoto(PhishPond.Concrete.Photo instance);
    partial void InsertVideo(PhishPond.Concrete.Video instance);
    partial void UpdateVideo(PhishPond.Concrete.Video instance);
    partial void DeleteVideo(PhishPond.Concrete.Video instance);
    partial void InsertPost(PhishPond.Concrete.Post instance);
    partial void UpdatePost(PhishPond.Concrete.Post instance);
    partial void DeletePost(PhishPond.Concrete.Post instance);
    partial void InsertTopic(PhishPond.Concrete.Topic instance);
    partial void UpdateTopic(PhishPond.Concrete.Topic instance);
    partial void DeleteTopic(PhishPond.Concrete.Topic instance);
    partial void InsertGuessWholeShow(PhishPond.Concrete.GuessWholeShow instance);
    partial void UpdateGuessWholeShow(PhishPond.Concrete.GuessWholeShow instance);
    partial void DeleteGuessWholeShow(PhishPond.Concrete.GuessWholeShow instance);
    partial void InsertSetSong(PhishPond.Concrete.SetSong instance);
    partial void UpdateSetSong(PhishPond.Concrete.SetSong instance);
    partial void DeleteSetSong(PhishPond.Concrete.SetSong instance);
    partial void Insertaspnet_Membership(PhishPond.Concrete.aspnet_Membership instance);
    partial void Updateaspnet_Membership(PhishPond.Concrete.aspnet_Membership instance);
    partial void Deleteaspnet_Membership(PhishPond.Concrete.aspnet_Membership instance);
    partial void Insertaspnet_User(PhishPond.Concrete.aspnet_User instance);
    partial void Updateaspnet_User(PhishPond.Concrete.aspnet_User instance);
    partial void Deleteaspnet_User(PhishPond.Concrete.aspnet_User instance);
    partial void InsertProfile(PhishPond.Concrete.Profile instance);
    partial void UpdateProfile(PhishPond.Concrete.Profile instance);
    partial void DeleteProfile(PhishPond.Concrete.Profile instance);
    partial void InsertFavoriteVersion(PhishPond.Concrete.FavoriteVersion instance);
    partial void UpdateFavoriteVersion(PhishPond.Concrete.FavoriteVersion instance);
    partial void DeleteFavoriteVersion(PhishPond.Concrete.FavoriteVersion instance);
    partial void InsertPoster(PhishPond.Concrete.Poster instance);
    partial void UpdatePoster(PhishPond.Concrete.Poster instance);
    partial void DeletePoster(PhishPond.Concrete.Poster instance);
    partial void InsertTicketStub(PhishPond.Concrete.TicketStub instance);
    partial void UpdateTicketStub(PhishPond.Concrete.TicketStub instance);
    partial void DeleteTicketStub(PhishPond.Concrete.TicketStub instance);
    partial void InsertArt(PhishPond.Concrete.Art instance);
    partial void UpdateArt(PhishPond.Concrete.Art instance);
    partial void DeleteArt(PhishPond.Concrete.Art instance);
    partial void InsertMyShow(PhishPond.Concrete.MyShow instance);
    partial void UpdateMyShow(PhishPond.Concrete.MyShow instance);
    partial void DeleteMyShow(PhishPond.Concrete.MyShow instance);
    partial void InsertMyShowPoster(PhishPond.Concrete.MyShowPoster instance);
    partial void UpdateMyShowPoster(PhishPond.Concrete.MyShowPoster instance);
    partial void DeleteMyShowPoster(PhishPond.Concrete.MyShowPoster instance);
    partial void InsertMyShowTicketStub(PhishPond.Concrete.MyShowTicketStub instance);
    partial void UpdateMyShowTicketStub(PhishPond.Concrete.MyShowTicketStub instance);
    partial void DeleteMyShowTicketStub(PhishPond.Concrete.MyShowTicketStub instance);
    partial void InsertMyShowArt(PhishPond.Concrete.MyShowArt instance);
    partial void UpdateMyShowArt(PhishPond.Concrete.MyShowArt instance);
    partial void DeleteMyShowArt(PhishPond.Concrete.MyShowArt instance);
    partial void InsertAnalysis(PhishPond.Concrete.Analysis instance);
    partial void UpdateAnalysis(PhishPond.Concrete.Analysis instance);
    partial void DeleteAnalysis(PhishPond.Concrete.Analysis instance);
    partial void InsertWantedList(PhishPond.Concrete.WantedList instance);
    partial void UpdateWantedList(PhishPond.Concrete.WantedList instance);
    partial void DeleteWantedList(PhishPond.Concrete.WantedList instance);
    #endregion
		
		public PhishDatabase() : 
				base(global::PhishPond.Properties.Settings.Default.PhishPondConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PhishDatabase(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PhishDatabase(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PhishDatabase(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PhishDatabase(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<PhishPond.Concrete.Show> Shows
		{
			get
			{
				return this.GetTable<PhishPond.Concrete.Show>();
			}
		}
		
		public System.Data.Linq.Table<PhishPond.Concrete.Song> Songs
		{
			get
			{
				return this.GetTable<PhishPond.Concrete.Song>();
			}
		}
		
		public System.Data.Linq.Table<PhishPond.Concrete.Set> Sets
		{
			get
			{
				return this.GetTable<PhishPond.Concrete.Set>();
			}
		}
		
		public System.Data.Linq.Table<PhishPond.Concrete.Tour> Tours
		{
			get
			{
				return this.GetTable<PhishPond.Concrete.Tour>();
			}
		}
		
		public System.Data.Linq.Table<PhishPond.Concrete.Photo> Photos
		{
			get
			{
				return this.GetTable<PhishPond.Concrete.Photo>();
			}
		}
		
		public System.Data.Linq.Table<PhishPond.Concrete.Video> Videos
		{
			get
			{
				return this.GetTable<PhishPond.Concrete.Video>();
			}
		}
		
		public System.Data.Linq.Table<PhishPond.Concrete.Post> Posts
		{
			get
			{
				return this.GetTable<PhishPond.Concrete.Post>();
			}
		}
		
		public System.Data.Linq.Table<PhishPond.Concrete.Topic> Topics
		{
			get
			{
				return this.GetTable<PhishPond.Concrete.Topic>();
			}
		}
		
		public System.Data.Linq.Table<PhishPond.Concrete.GuessWholeShow> GuessWholeShows
		{
			get
			{
				return this.GetTable<PhishPond.Concrete.GuessWholeShow>();
			}
		}
		
		public System.Data.Linq.Table<PhishPond.Concrete.SetSong> SetSongs
		{
			get
			{
				return this.GetTable<PhishPond.Concrete.SetSong>();
			}
		}
		
		public System.Data.Linq.Table<PhishPond.Concrete.aspnet_Membership> aspnet_Memberships
		{
			get
			{
				return this.GetTable<PhishPond.Concrete.aspnet_Membership>();
			}
		}
		
		public System.Data.Linq.Table<PhishPond.Concrete.aspnet_User> aspnet_Users
		{
			get
			{
				return this.GetTable<PhishPond.Concrete.aspnet_User>();
			}
		}
		
		public System.Data.Linq.Table<PhishPond.Concrete.Profile> Profiles
		{
			get
			{
				return this.GetTable<PhishPond.Concrete.Profile>();
			}
		}
		
		public System.Data.Linq.Table<PhishPond.Concrete.FavoriteVersion> FavoriteVersions
		{
			get
			{
				return this.GetTable<PhishPond.Concrete.FavoriteVersion>();
			}
		}
		
		public System.Data.Linq.Table<PhishPond.Concrete.Poster> Posters
		{
			get
			{
				return this.GetTable<PhishPond.Concrete.Poster>();
			}
		}
		
		public System.Data.Linq.Table<PhishPond.Concrete.TicketStub> TicketStubs
		{
			get
			{
				return this.GetTable<PhishPond.Concrete.TicketStub>();
			}
		}
		
		public System.Data.Linq.Table<PhishPond.Concrete.Art> Arts
		{
			get
			{
				return this.GetTable<PhishPond.Concrete.Art>();
			}
		}
		
		public System.Data.Linq.Table<PhishPond.Concrete.MyShow> MyShows
		{
			get
			{
				return this.GetTable<PhishPond.Concrete.MyShow>();
			}
		}
		
		public System.Data.Linq.Table<PhishPond.Concrete.MyShowPoster> MyShowPosters
		{
			get
			{
				return this.GetTable<PhishPond.Concrete.MyShowPoster>();
			}
		}
		
		public System.Data.Linq.Table<PhishPond.Concrete.MyShowTicketStub> MyShowTicketStubs
		{
			get
			{
				return this.GetTable<PhishPond.Concrete.MyShowTicketStub>();
			}
		}
		
		public System.Data.Linq.Table<PhishPond.Concrete.MyShowArt> MyShowArts
		{
			get
			{
				return this.GetTable<PhishPond.Concrete.MyShowArt>();
			}
		}
		
		public System.Data.Linq.Table<PhishPond.Concrete.Analysis> Analysis
		{
			get
			{
				return this.GetTable<PhishPond.Concrete.Analysis>();
			}
		}
		
		public System.Data.Linq.Table<PhishPond.Concrete.WantedList> WantedLists
		{
			get
			{
				return this.GetTable<PhishPond.Concrete.WantedList>();
			}
		}
		
		[Function(Name="dbo.yafGetRecentPosts")]
		public ISingleResult<PhishPond.Concrete.yafGetRecentPostsResult> yafGetRecentPosts()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<PhishPond.Concrete.yafGetRecentPostsResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.yafGetRecentTopics")]
		public ISingleResult<PhishPond.Concrete.yafGetRecentTopicsResult> yafGetRecentTopics()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<PhishPond.Concrete.yafGetRecentTopicsResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.profileGetFavoriteVersions")]
		public ISingleResult<PhishPond.Concrete.profileGetFavoriteVersionsResult> profileGetFavoriteVersions([Parameter(Name="UserId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> userId, [Parameter(Name="Album", DbType="VarChar(100)")] string album)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userId, album);
			return ((ISingleResult<PhishPond.Concrete.profileGetFavoriteVersionsResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.profileGetAllVersions")]
		public ISingleResult<PhishPond.Concrete.profileGetAllVersionsResult> profileGetAllVersions([Parameter(Name="SongId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> songId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), songId);
			return ((ISingleResult<PhishPond.Concrete.profileGetAllVersionsResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.yafGetUserId")]
		public ISingleResult<PhishPond.Concrete.yafGetUserIdResult> yafGetUserId([Parameter(Name="YafUserId", DbType="Int")] System.Nullable<int> yafUserId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), yafUserId);
			return ((ISingleResult<PhishPond.Concrete.yafGetUserIdResult>)(result.ReturnValue));
		}
	}
}
namespace PhishPond.Concrete
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.ComponentModel;
	using System;
	
	
	[Table(Name="dbo.Show")]
	public partial class Show : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ShowId;
		
		private System.Nullable<int> _Rank;
		
		private string _ShowName;
		
		private string _VenueName;
		
		private string _City;
		
		private string _State;
		
		private string _Country;
		
		private System.Nullable<System.DateTime> _ShowDate;
		
		private System.Nullable<decimal> _TicketPrice;
		
		private string _ShowNotes;
		
		private System.DateTime _CreatedDate;
		
		private bool _Deleted;
		
		private System.Nullable<System.DateTime> _DeletedDate;
		
		private bool _UserCreatedShow;
		
		private System.Nullable<System.Guid> _TourId;
		
		private System.Nullable<System.DateTime> _UpdatedDate;
		
		private System.Nullable<int> _Order;
		
		private System.Nullable<System.Guid> _UserId;
		
		private string _VenueNotes;
		
		private EntitySet<Set> _Sets;
		
		private EntitySet<Photo> _Photos;
		
		private EntitySet<Video> _Videos;
		
		private EntitySet<Topic> _Topics;
		
		private EntitySet<Poster> _Posters;
		
		private EntitySet<TicketStub> _TicketStubs;
		
		private EntitySet<Art> _Arts;
		
		private EntitySet<MyShow> _MyShows;
		
		private EntityRef<Tour> _Tour;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnShowIdChanging(System.Guid value);
    partial void OnShowIdChanged();
    partial void OnRankChanging(System.Nullable<int> value);
    partial void OnRankChanged();
    partial void OnShowNameChanging(string value);
    partial void OnShowNameChanged();
    partial void OnVenueNameChanging(string value);
    partial void OnVenueNameChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnShowDateChanging(System.Nullable<System.DateTime> value);
    partial void OnShowDateChanged();
    partial void OnTicketPriceChanging(System.Nullable<decimal> value);
    partial void OnTicketPriceChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    partial void OnDeletedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedDateChanged();
    partial void OnOfficialChanging(bool value);
    partial void OnOfficialChanged();
    partial void OnTourIdChanging(System.Nullable<System.Guid> value);
    partial void OnTourIdChanged();
    partial void OnUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedDateChanged();
    partial void OnOrderChanging(System.Nullable<int> value);
    partial void OnOrderChanged();
    partial void OnUserIdChanging(System.Nullable<System.Guid> value);
    partial void OnUserIdChanged();
    partial void OnVenueNotesChanging(string value);
    partial void OnVenueNotesChanged();
    #endregion
		
		public Show()
		{
			this._Sets = new EntitySet<Set>(new Action<Set>(this.attach_Sets), new Action<Set>(this.detach_Sets));
			this._Photos = new EntitySet<Photo>(new Action<Photo>(this.attach_Photos), new Action<Photo>(this.detach_Photos));
			this._Videos = new EntitySet<Video>(new Action<Video>(this.attach_Videos), new Action<Video>(this.detach_Videos));
			this._Topics = new EntitySet<Topic>(new Action<Topic>(this.attach_Topics), new Action<Topic>(this.detach_Topics));
			this._Posters = new EntitySet<Poster>(new Action<Poster>(this.attach_Posters), new Action<Poster>(this.detach_Posters));
			this._TicketStubs = new EntitySet<TicketStub>(new Action<TicketStub>(this.attach_TicketStubs), new Action<TicketStub>(this.detach_TicketStubs));
			this._Arts = new EntitySet<Art>(new Action<Art>(this.attach_Arts), new Action<Art>(this.detach_Arts));
			this._MyShows = new EntitySet<MyShow>(new Action<MyShow>(this.attach_MyShows), new Action<MyShow>(this.detach_MyShows));
			this._Tour = default(EntityRef<Tour>);
			OnCreated();
		}
		
		[Column(Storage="_ShowId", IsPrimaryKey=true)]
		public System.Guid ShowId
		{
			get
			{
				return this._ShowId;
			}
			set
			{
				if ((this._ShowId != value))
				{
					this.OnShowIdChanging(value);
					this.SendPropertyChanging();
					this._ShowId = value;
					this.SendPropertyChanged("ShowId");
					this.OnShowIdChanged();
				}
			}
		}
		
		[Column(Storage="_Rank")]
		public System.Nullable<int> Rank
		{
			get
			{
				return this._Rank;
			}
			set
			{
				if ((this._Rank != value))
				{
					this.OnRankChanging(value);
					this.SendPropertyChanging();
					this._Rank = value;
					this.SendPropertyChanged("Rank");
					this.OnRankChanged();
				}
			}
		}
		
		[Column(Storage="_ShowName")]
		public string ShowName
		{
			get
			{
				return this._ShowName;
			}
			set
			{
				if ((this._ShowName != value))
				{
					this.OnShowNameChanging(value);
					this.SendPropertyChanging();
					this._ShowName = value;
					this.SendPropertyChanged("ShowName");
					this.OnShowNameChanged();
				}
			}
		}
		
		[Column(Storage="_VenueName")]
		public string VenueName
		{
			get
			{
				return this._VenueName;
			}
			set
			{
				if ((this._VenueName != value))
				{
					this.OnVenueNameChanging(value);
					this.SendPropertyChanging();
					this._VenueName = value;
					this.SendPropertyChanged("VenueName");
					this.OnVenueNameChanged();
				}
			}
		}
		
		[Column(Storage="_City")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[Column(Storage="_State")]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[Column(Storage="_Country")]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[Column(Storage="_ShowDate")]
		public System.Nullable<System.DateTime> ShowDate
		{
			get
			{
				return this._ShowDate;
			}
			set
			{
				if ((this._ShowDate != value))
				{
					this.OnShowDateChanging(value);
					this.SendPropertyChanging();
					this._ShowDate = value;
					this.SendPropertyChanged("ShowDate");
					this.OnShowDateChanged();
				}
			}
		}
		
		[Column(Storage="_TicketPrice")]
		public System.Nullable<decimal> TicketPrice
		{
			get
			{
				return this._TicketPrice;
			}
			set
			{
				if ((this._TicketPrice != value))
				{
					this.OnTicketPriceChanging(value);
					this.SendPropertyChanging();
					this._TicketPrice = value;
					this.SendPropertyChanged("TicketPrice");
					this.OnTicketPriceChanged();
				}
			}
		}
		
		[Column(Storage="_ShowNotes")]
		public string Notes
		{
			get
			{
				return this._ShowNotes;
			}
			set
			{
				if ((this._ShowNotes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._ShowNotes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_Deleted")]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_DeletedDate")]
		public System.Nullable<System.DateTime> DeletedDate
		{
			get
			{
				return this._DeletedDate;
			}
			set
			{
				if ((this._DeletedDate != value))
				{
					this.OnDeletedDateChanging(value);
					this.SendPropertyChanging();
					this._DeletedDate = value;
					this.SendPropertyChanged("DeletedDate");
					this.OnDeletedDateChanged();
				}
			}
		}
		
		[Column(Storage="_UserCreatedShow")]
		public bool Official
		{
			get
			{
				return this._UserCreatedShow;
			}
			set
			{
				if ((this._UserCreatedShow != value))
				{
					this.OnOfficialChanging(value);
					this.SendPropertyChanging();
					this._UserCreatedShow = value;
					this.SendPropertyChanged("Official");
					this.OnOfficialChanged();
				}
			}
		}
		
		[Column(Storage="_TourId")]
		public System.Nullable<System.Guid> TourId
		{
			get
			{
				return this._TourId;
			}
			set
			{
				if ((this._TourId != value))
				{
					if (this._Tour.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTourIdChanging(value);
					this.SendPropertyChanging();
					this._TourId = value;
					this.SendPropertyChanged("TourId");
					this.OnTourIdChanged();
				}
			}
		}
		
		[Column(Storage="_UpdatedDate")]
		public System.Nullable<System.DateTime> UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_Order")]
		public System.Nullable<int> Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[Column(Storage="_UserId")]
		public System.Nullable<System.Guid> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_VenueNotes")]
		public string VenueNotes
		{
			get
			{
				return this._VenueNotes;
			}
			set
			{
				if ((this._VenueNotes != value))
				{
					this.OnVenueNotesChanging(value);
					this.SendPropertyChanging();
					this._VenueNotes = value;
					this.SendPropertyChanged("VenueNotes");
					this.OnVenueNotesChanged();
				}
			}
		}
		
		[Association(Name="Show_Set", Storage="_Sets", ThisKey="ShowId", OtherKey="ShowId")]
		public EntitySet<Set> Sets
		{
			get
			{
				return this._Sets;
			}
			set
			{
				this._Sets.Assign(value);
			}
		}
		
		[Association(Name="Show_Photo", Storage="_Photos", ThisKey="ShowId", OtherKey="ShowId")]
		public EntitySet<Photo> Photos
		{
			get
			{
				return this._Photos;
			}
			set
			{
				this._Photos.Assign(value);
			}
		}
		
		[Association(Name="Show_Video", Storage="_Videos", ThisKey="ShowId", OtherKey="ShowId")]
		public EntitySet<Video> Videos
		{
			get
			{
				return this._Videos;
			}
			set
			{
				this._Videos.Assign(value);
			}
		}
		
		[Association(Name="Show_Topic", Storage="_Topics", ThisKey="ShowId", OtherKey="ShowId")]
		public EntitySet<Topic> Topics
		{
			get
			{
				return this._Topics;
			}
			set
			{
				this._Topics.Assign(value);
			}
		}
		
		[Association(Name="Show_Poster", Storage="_Posters", ThisKey="ShowId", OtherKey="PhotoId")]
		public EntitySet<Poster> Posters
		{
			get
			{
				return this._Posters;
			}
			set
			{
				this._Posters.Assign(value);
			}
		}
		
		[Association(Name="Show_TicketStub", Storage="_TicketStubs", ThisKey="ShowId", OtherKey="PhotoId")]
		public EntitySet<TicketStub> TicketStubs
		{
			get
			{
				return this._TicketStubs;
			}
			set
			{
				this._TicketStubs.Assign(value);
			}
		}
		
		[Association(Name="Show_Art", Storage="_Arts", ThisKey="ShowId", OtherKey="ShowId")]
		public EntitySet<Art> Arts
		{
			get
			{
				return this._Arts;
			}
			set
			{
				this._Arts.Assign(value);
			}
		}
		
		[Association(Name="Show_MyShow", Storage="_MyShows", ThisKey="ShowId", OtherKey="ShowId")]
		public EntitySet<MyShow> MyShows
		{
			get
			{
				return this._MyShows;
			}
			set
			{
				this._MyShows.Assign(value);
			}
		}
		
		[Association(Name="Tour_Show", Storage="_Tour", ThisKey="TourId", OtherKey="TourId", IsForeignKey=true)]
		public Tour Tour
		{
			get
			{
				return this._Tour.Entity;
			}
			set
			{
				Tour previousValue = this._Tour.Entity;
				if (((previousValue != value) 
							|| (this._Tour.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tour.Entity = null;
						previousValue.Shows.Remove(this);
					}
					this._Tour.Entity = value;
					if ((value != null))
					{
						value.Shows.Add(this);
						this._TourId = value.TourId;
					}
					else
					{
						this._TourId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Tour");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Sets(Set entity)
		{
			this.SendPropertyChanging();
			entity.Show = this;
		}
		
		private void detach_Sets(Set entity)
		{
			this.SendPropertyChanging();
			entity.Show = null;
		}
		
		private void attach_Photos(Photo entity)
		{
			this.SendPropertyChanging();
			entity.Show = this;
		}
		
		private void detach_Photos(Photo entity)
		{
			this.SendPropertyChanging();
			entity.Show = null;
		}
		
		private void attach_Videos(Video entity)
		{
			this.SendPropertyChanging();
			entity.Show = this;
		}
		
		private void detach_Videos(Video entity)
		{
			this.SendPropertyChanging();
			entity.Show = null;
		}
		
		private void attach_Topics(Topic entity)
		{
			this.SendPropertyChanging();
			entity.Show = this;
		}
		
		private void detach_Topics(Topic entity)
		{
			this.SendPropertyChanging();
			entity.Show = null;
		}
		
		private void attach_Posters(Poster entity)
		{
			this.SendPropertyChanging();
			entity.Show = this;
		}
		
		private void detach_Posters(Poster entity)
		{
			this.SendPropertyChanging();
			entity.Show = null;
		}
		
		private void attach_TicketStubs(TicketStub entity)
		{
			this.SendPropertyChanging();
			entity.Show = this;
		}
		
		private void detach_TicketStubs(TicketStub entity)
		{
			this.SendPropertyChanging();
			entity.Show = null;
		}
		
		private void attach_Arts(Art entity)
		{
			this.SendPropertyChanging();
			entity.Show = this;
		}
		
		private void detach_Arts(Art entity)
		{
			this.SendPropertyChanging();
			entity.Show = null;
		}
		
		private void attach_MyShows(MyShow entity)
		{
			this.SendPropertyChanging();
			entity.Show = this;
		}
		
		private void detach_MyShows(MyShow entity)
		{
			this.SendPropertyChanging();
			entity.Show = null;
		}
	}
	
	[Table(Name="dbo.Song")]
	public partial class Song : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _SongId;
		
		private string _SongName;
		
		private System.Nullable<short> _Order;
		
		private string _Notes;
		
		private string _SpecialAppearances;
		
		private System.Nullable<double> _Length;
		
		private string _Album;
		
		private System.Nullable<short> _JamStyle;
		
		private bool _Cover;
		
		private System.DateTime _CreatedDate;
		
		private bool _Deleted;
		
		private System.Nullable<System.DateTime> _DeletedDate;
		
		private System.Nullable<System.DateTime> _UpdatedDate;
		
		private string _Abbreviation;
		
		private EntitySet<SetSong> _SetSongs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSongIdChanging(System.Guid value);
    partial void OnSongIdChanged();
    partial void OnSongNameChanging(string value);
    partial void OnSongNameChanged();
    partial void OnOrderChanging(System.Nullable<short> value);
    partial void OnOrderChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnSpecialAppearancesChanging(string value);
    partial void OnSpecialAppearancesChanged();
    partial void OnLengthChanging(System.Nullable<double> value);
    partial void OnLengthChanged();
    partial void OnAlbumChanging(string value);
    partial void OnAlbumChanged();
    partial void OnJamStyleChanging(System.Nullable<short> value);
    partial void OnJamStyleChanged();
    partial void OnCoverChanging(bool value);
    partial void OnCoverChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    partial void OnDeletedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedDateChanged();
    partial void OnUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedDateChanged();
    partial void OnAbbreviationChanging(string value);
    partial void OnAbbreviationChanged();
    #endregion
		
		public Song()
		{
			this._SetSongs = new EntitySet<SetSong>(new Action<SetSong>(this.attach_SetSongs), new Action<SetSong>(this.detach_SetSongs));
			OnCreated();
		}
		
		[Column(Storage="_SongId", IsPrimaryKey=true)]
		public System.Guid SongId
		{
			get
			{
				return this._SongId;
			}
			set
			{
				if ((this._SongId != value))
				{
					this.OnSongIdChanging(value);
					this.SendPropertyChanging();
					this._SongId = value;
					this.SendPropertyChanged("SongId");
					this.OnSongIdChanged();
				}
			}
		}
		
		[Column(Storage="_SongName", CanBeNull=false)]
		public string SongName
		{
			get
			{
				return this._SongName;
			}
			set
			{
				if ((this._SongName != value))
				{
					this.OnSongNameChanging(value);
					this.SendPropertyChanging();
					this._SongName = value;
					this.SendPropertyChanged("SongName");
					this.OnSongNameChanged();
				}
			}
		}
		
		[Column(Storage="_Order")]
		public System.Nullable<short> Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[Column(Storage="_Notes")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[Column(Storage="_SpecialAppearances")]
		public string SpecialAppearances
		{
			get
			{
				return this._SpecialAppearances;
			}
			set
			{
				if ((this._SpecialAppearances != value))
				{
					this.OnSpecialAppearancesChanging(value);
					this.SendPropertyChanging();
					this._SpecialAppearances = value;
					this.SendPropertyChanged("SpecialAppearances");
					this.OnSpecialAppearancesChanged();
				}
			}
		}
		
		[Column(Storage="_Length")]
		public System.Nullable<double> Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this.OnLengthChanging(value);
					this.SendPropertyChanging();
					this._Length = value;
					this.SendPropertyChanged("Length");
					this.OnLengthChanged();
				}
			}
		}
		
		[Column(Storage="_Album")]
		public string Album
		{
			get
			{
				return this._Album;
			}
			set
			{
				if ((this._Album != value))
				{
					this.OnAlbumChanging(value);
					this.SendPropertyChanging();
					this._Album = value;
					this.SendPropertyChanged("Album");
					this.OnAlbumChanged();
				}
			}
		}
		
		[Column(Storage="_JamStyle")]
		public System.Nullable<short> JamStyle
		{
			get
			{
				return this._JamStyle;
			}
			set
			{
				if ((this._JamStyle != value))
				{
					this.OnJamStyleChanging(value);
					this.SendPropertyChanging();
					this._JamStyle = value;
					this.SendPropertyChanged("JamStyle");
					this.OnJamStyleChanged();
				}
			}
		}
		
		[Column(Storage="_Cover")]
		public bool Cover
		{
			get
			{
				return this._Cover;
			}
			set
			{
				if ((this._Cover != value))
				{
					this.OnCoverChanging(value);
					this.SendPropertyChanging();
					this._Cover = value;
					this.SendPropertyChanged("Cover");
					this.OnCoverChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_Deleted")]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_DeletedDate")]
		public System.Nullable<System.DateTime> DeletedDate
		{
			get
			{
				return this._DeletedDate;
			}
			set
			{
				if ((this._DeletedDate != value))
				{
					this.OnDeletedDateChanging(value);
					this.SendPropertyChanging();
					this._DeletedDate = value;
					this.SendPropertyChanged("DeletedDate");
					this.OnDeletedDateChanged();
				}
			}
		}
		
		[Column(Storage="_UpdatedDate")]
		public System.Nullable<System.DateTime> UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_Abbreviation")]
		public string Abbreviation
		{
			get
			{
				return this._Abbreviation;
			}
			set
			{
				if ((this._Abbreviation != value))
				{
					this.OnAbbreviationChanging(value);
					this.SendPropertyChanging();
					this._Abbreviation = value;
					this.SendPropertyChanged("Abbreviation");
					this.OnAbbreviationChanged();
				}
			}
		}
		
		[Association(Name="Song_SetSong", Storage="_SetSongs", ThisKey="SongId", OtherKey="SongId")]
		public EntitySet<SetSong> SetSongs
		{
			get
			{
				return this._SetSongs;
			}
			set
			{
				this._SetSongs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SetSongs(SetSong entity)
		{
			this.SendPropertyChanging();
			entity.Song = this;
		}
		
		private void detach_SetSongs(SetSong entity)
		{
			this.SendPropertyChanging();
			entity.Song = null;
		}
	}
	
	[Table(Name="dbo.Set")]
	public partial class Set : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _SetId;
		
		private System.Nullable<short> _SetNumber;
		
		private bool _Encore;
		
		private string _Notes;
		
		private System.DateTime _CreatedDate;
		
		private bool _Deleted;
		
		private System.Nullable<System.DateTime> _DeletedDate;
		
		private System.Nullable<System.Guid> _ShowId;
		
		private System.Nullable<System.DateTime> _UpdatedDate;
		
		private bool _Official;
		
		private EntityRef<GuessWholeShow> _GuessWholeShows;
		
		private EntitySet<SetSong> _SetSongs;
		
		private EntityRef<Show> _Show;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSetIdChanging(System.Guid value);
    partial void OnSetIdChanged();
    partial void OnSetNumberChanging(System.Nullable<short> value);
    partial void OnSetNumberChanged();
    partial void OnEncoreChanging(bool value);
    partial void OnEncoreChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    partial void OnDeletedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedDateChanged();
    partial void OnShowIdChanging(System.Nullable<System.Guid> value);
    partial void OnShowIdChanged();
    partial void OnUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedDateChanged();
    partial void OnOfficialChanging(bool value);
    partial void OnOfficialChanged();
    #endregion
		
		public Set()
		{
			this._GuessWholeShows = default(EntityRef<GuessWholeShow>);
			this._SetSongs = new EntitySet<SetSong>(new Action<SetSong>(this.attach_SetSongs), new Action<SetSong>(this.detach_SetSongs));
			this._Show = default(EntityRef<Show>);
			OnCreated();
		}
		
		[Column(Storage="_SetId", IsPrimaryKey=true)]
		public System.Guid SetId
		{
			get
			{
				return this._SetId;
			}
			set
			{
				if ((this._SetId != value))
				{
					this.OnSetIdChanging(value);
					this.SendPropertyChanging();
					this._SetId = value;
					this.SendPropertyChanged("SetId");
					this.OnSetIdChanged();
				}
			}
		}
		
		[Column(Storage="_SetNumber")]
		public System.Nullable<short> SetNumber
		{
			get
			{
				return this._SetNumber;
			}
			set
			{
				if ((this._SetNumber != value))
				{
					this.OnSetNumberChanging(value);
					this.SendPropertyChanging();
					this._SetNumber = value;
					this.SendPropertyChanged("SetNumber");
					this.OnSetNumberChanged();
				}
			}
		}
		
		[Column(Storage="_Encore")]
		public bool Encore
		{
			get
			{
				return this._Encore;
			}
			set
			{
				if ((this._Encore != value))
				{
					this.OnEncoreChanging(value);
					this.SendPropertyChanging();
					this._Encore = value;
					this.SendPropertyChanged("Encore");
					this.OnEncoreChanged();
				}
			}
		}
		
		[Column(Storage="_Notes")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_Deleted")]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_DeletedDate")]
		public System.Nullable<System.DateTime> DeletedDate
		{
			get
			{
				return this._DeletedDate;
			}
			set
			{
				if ((this._DeletedDate != value))
				{
					this.OnDeletedDateChanging(value);
					this.SendPropertyChanging();
					this._DeletedDate = value;
					this.SendPropertyChanged("DeletedDate");
					this.OnDeletedDateChanged();
				}
			}
		}
		
		[Column(Storage="_ShowId")]
		public System.Nullable<System.Guid> ShowId
		{
			get
			{
				return this._ShowId;
			}
			set
			{
				if ((this._ShowId != value))
				{
					if (this._Show.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShowIdChanging(value);
					this.SendPropertyChanging();
					this._ShowId = value;
					this.SendPropertyChanged("ShowId");
					this.OnShowIdChanged();
				}
			}
		}
		
		[Column(Storage="_UpdatedDate")]
		public System.Nullable<System.DateTime> UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_Official")]
		public bool Official
		{
			get
			{
				return this._Official;
			}
			set
			{
				if ((this._Official != value))
				{
					this.OnOfficialChanging(value);
					this.SendPropertyChanging();
					this._Official = value;
					this.SendPropertyChanged("Official");
					this.OnOfficialChanged();
				}
			}
		}
		
		[Association(Name="Set_GuessWholeShow", Storage="_GuessWholeShows", ThisKey="SetId", OtherKey="SetId", IsUnique=true, IsForeignKey=false)]
		public GuessWholeShow GuessWholeShows
		{
			get
			{
				return this._GuessWholeShows.Entity;
			}
			set
			{
				GuessWholeShow previousValue = this._GuessWholeShows.Entity;
				if (((previousValue != value) 
							|| (this._GuessWholeShows.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GuessWholeShows.Entity = null;
						previousValue.Set = null;
					}
					this._GuessWholeShows.Entity = value;
					if ((value != null))
					{
						value.Set = this;
					}
					this.SendPropertyChanged("GuessWholeShows");
				}
			}
		}
		
		[Association(Name="Set_SetSong", Storage="_SetSongs", ThisKey="SetId", OtherKey="SetId")]
		public EntitySet<SetSong> SetSongs
		{
			get
			{
				return this._SetSongs;
			}
			set
			{
				this._SetSongs.Assign(value);
			}
		}
		
		[Association(Name="Show_Set", Storage="_Show", ThisKey="ShowId", OtherKey="ShowId", IsForeignKey=true)]
		public Show Show
		{
			get
			{
				return this._Show.Entity;
			}
			set
			{
				Show previousValue = this._Show.Entity;
				if (((previousValue != value) 
							|| (this._Show.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Show.Entity = null;
						previousValue.Sets.Remove(this);
					}
					this._Show.Entity = value;
					if ((value != null))
					{
						value.Sets.Add(this);
						this._ShowId = value.ShowId;
					}
					else
					{
						this._ShowId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Show");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SetSongs(SetSong entity)
		{
			this.SendPropertyChanging();
			entity.Set = this;
		}
		
		private void detach_SetSongs(SetSong entity)
		{
			this.SendPropertyChanging();
			entity.Set = null;
		}
	}
	
	[Table(Name="dbo.Tour")]
	public partial class Tour : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _TourId;
		
		private string _TourName;
		
		private System.DateTime _CreatedDate;
		
		private bool _Deleted;
		
		private System.Nullable<System.DateTime> _DeletedDate;
		
		private System.Nullable<System.DateTime> _UpdatedDate;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private bool _Official;
		
		private EntitySet<Show> _Shows;
		
		private EntitySet<Topic> _Topics;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTourIdChanging(System.Guid value);
    partial void OnTourIdChanged();
    partial void OnTourNameChanging(string value);
    partial void OnTourNameChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    partial void OnDeletedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedDateChanged();
    partial void OnUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedDateChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnOfficialChanging(bool value);
    partial void OnOfficialChanged();
    #endregion
		
		public Tour()
		{
			this._Shows = new EntitySet<Show>(new Action<Show>(this.attach_Shows), new Action<Show>(this.detach_Shows));
			this._Topics = new EntitySet<Topic>(new Action<Topic>(this.attach_Topics), new Action<Topic>(this.detach_Topics));
			OnCreated();
		}
		
		[Column(Storage="_TourId", IsPrimaryKey=true)]
		public System.Guid TourId
		{
			get
			{
				return this._TourId;
			}
			set
			{
				if ((this._TourId != value))
				{
					this.OnTourIdChanging(value);
					this.SendPropertyChanging();
					this._TourId = value;
					this.SendPropertyChanged("TourId");
					this.OnTourIdChanged();
				}
			}
		}
		
		[Column(Storage="_TourName", CanBeNull=false)]
		public string TourName
		{
			get
			{
				return this._TourName;
			}
			set
			{
				if ((this._TourName != value))
				{
					this.OnTourNameChanging(value);
					this.SendPropertyChanging();
					this._TourName = value;
					this.SendPropertyChanged("TourName");
					this.OnTourNameChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_Deleted")]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_DeletedDate")]
		public System.Nullable<System.DateTime> DeletedDate
		{
			get
			{
				return this._DeletedDate;
			}
			set
			{
				if ((this._DeletedDate != value))
				{
					this.OnDeletedDateChanging(value);
					this.SendPropertyChanging();
					this._DeletedDate = value;
					this.SendPropertyChanged("DeletedDate");
					this.OnDeletedDateChanged();
				}
			}
		}
		
		[Column(Storage="_UpdatedDate")]
		public System.Nullable<System.DateTime> UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_StartDate")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_Official")]
		public bool Official
		{
			get
			{
				return this._Official;
			}
			set
			{
				if ((this._Official != value))
				{
					this.OnOfficialChanging(value);
					this.SendPropertyChanging();
					this._Official = value;
					this.SendPropertyChanged("Official");
					this.OnOfficialChanged();
				}
			}
		}
		
		[Association(Name="Tour_Show", Storage="_Shows", ThisKey="TourId", OtherKey="TourId")]
		public EntitySet<Show> Shows
		{
			get
			{
				return this._Shows;
			}
			set
			{
				this._Shows.Assign(value);
			}
		}
		
		[Association(Name="Tour_Topic", Storage="_Topics", ThisKey="TourId", OtherKey="TourId")]
		public EntitySet<Topic> Topics
		{
			get
			{
				return this._Topics;
			}
			set
			{
				this._Topics.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Shows(Show entity)
		{
			this.SendPropertyChanging();
			entity.Tour = this;
		}
		
		private void detach_Shows(Show entity)
		{
			this.SendPropertyChanging();
			entity.Tour = null;
		}
		
		private void attach_Topics(Topic entity)
		{
			this.SendPropertyChanging();
			entity.Tour = this;
		}
		
		private void detach_Topics(Topic entity)
		{
			this.SendPropertyChanging();
			entity.Tour = null;
		}
	}
	
	[Table(Name="dbo.Photo")]
	public partial class Photo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PhotoId;
		
		private string _Source;
		
		private System.Nullable<short> _Quality;
		
		private string _Notes;
		
		private string _FileName;
		
		private string _FileLocation;
		
		private string _NickName;
		
		private short _Type;
		
		private System.Nullable<System.Guid> _ShowId;
		
		private System.Nullable<System.Guid> _SongId;
		
		private System.DateTime _CreatedDate;
		
		private bool _Deleted;
		
		private System.Nullable<System.DateTime> _DeletedDate;
		
		private System.Nullable<System.DateTime> _UpdatedDate;
		
		private byte[] _Image;
		
		private string _ContentType;
		
		private int _ContentLength;
		
		private System.Guid _UserId;
		
		private bool _Thumbnail;
		
		private EntitySet<Poster> _Posters;
		
		private EntitySet<TicketStub> _TicketStubs;
		
		private EntitySet<Art> _Arts;
		
		private EntityRef<Show> _Show;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPhotoIdChanging(System.Guid value);
    partial void OnPhotoIdChanged();
    partial void OnSourceChanging(string value);
    partial void OnSourceChanged();
    partial void OnQualityChanging(System.Nullable<short> value);
    partial void OnQualityChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnFileLocationChanging(string value);
    partial void OnFileLocationChanged();
    partial void OnNickNameChanging(string value);
    partial void OnNickNameChanged();
    partial void OnTypeChanging(short value);
    partial void OnTypeChanged();
    partial void OnShowIdChanging(System.Nullable<System.Guid> value);
    partial void OnShowIdChanged();
    partial void OnSongIdChanging(System.Nullable<System.Guid> value);
    partial void OnSongIdChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    partial void OnDeletedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedDateChanged();
    partial void OnUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedDateChanged();
    partial void OnImageChanging(byte[] value);
    partial void OnImageChanged();
    partial void OnContentTypeChanging(string value);
    partial void OnContentTypeChanged();
    partial void OnContentLengthChanging(int value);
    partial void OnContentLengthChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnThumbnailChanging(bool value);
    partial void OnThumbnailChanged();
    #endregion
		
		public Photo()
		{
			this._Posters = new EntitySet<Poster>(new Action<Poster>(this.attach_Posters), new Action<Poster>(this.detach_Posters));
			this._TicketStubs = new EntitySet<TicketStub>(new Action<TicketStub>(this.attach_TicketStubs), new Action<TicketStub>(this.detach_TicketStubs));
			this._Arts = new EntitySet<Art>(new Action<Art>(this.attach_Arts), new Action<Art>(this.detach_Arts));
			this._Show = default(EntityRef<Show>);
			OnCreated();
		}
		
		[Column(Storage="_PhotoId", IsPrimaryKey=true)]
		public System.Guid PhotoId
		{
			get
			{
				return this._PhotoId;
			}
			set
			{
				if ((this._PhotoId != value))
				{
					this.OnPhotoIdChanging(value);
					this.SendPropertyChanging();
					this._PhotoId = value;
					this.SendPropertyChanged("PhotoId");
					this.OnPhotoIdChanged();
				}
			}
		}
		
		[Column(Storage="_Source")]
		public string Source
		{
			get
			{
				return this._Source;
			}
			set
			{
				if ((this._Source != value))
				{
					this.OnSourceChanging(value);
					this.SendPropertyChanging();
					this._Source = value;
					this.SendPropertyChanged("Source");
					this.OnSourceChanged();
				}
			}
		}
		
		[Column(Storage="_Quality")]
		public System.Nullable<short> Quality
		{
			get
			{
				return this._Quality;
			}
			set
			{
				if ((this._Quality != value))
				{
					this.OnQualityChanging(value);
					this.SendPropertyChanging();
					this._Quality = value;
					this.SendPropertyChanged("Quality");
					this.OnQualityChanged();
				}
			}
		}
		
		[Column(Storage="_Notes")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[Column(Storage="_FileName", CanBeNull=false)]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[Column(Storage="_FileLocation")]
		public string FileLocation
		{
			get
			{
				return this._FileLocation;
			}
			set
			{
				if ((this._FileLocation != value))
				{
					this.OnFileLocationChanging(value);
					this.SendPropertyChanging();
					this._FileLocation = value;
					this.SendPropertyChanged("FileLocation");
					this.OnFileLocationChanged();
				}
			}
		}
		
		[Column(Storage="_NickName")]
		public string NickName
		{
			get
			{
				return this._NickName;
			}
			set
			{
				if ((this._NickName != value))
				{
					this.OnNickNameChanging(value);
					this.SendPropertyChanging();
					this._NickName = value;
					this.SendPropertyChanged("NickName");
					this.OnNickNameChanged();
				}
			}
		}
		
		[Column(Storage="_Type")]
		public short Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_ShowId")]
		public System.Nullable<System.Guid> ShowId
		{
			get
			{
				return this._ShowId;
			}
			set
			{
				if ((this._ShowId != value))
				{
					if (this._Show.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShowIdChanging(value);
					this.SendPropertyChanging();
					this._ShowId = value;
					this.SendPropertyChanged("ShowId");
					this.OnShowIdChanged();
				}
			}
		}
		
		[Column(Storage="_SongId")]
		public System.Nullable<System.Guid> SongId
		{
			get
			{
				return this._SongId;
			}
			set
			{
				if ((this._SongId != value))
				{
					this.OnSongIdChanging(value);
					this.SendPropertyChanging();
					this._SongId = value;
					this.SendPropertyChanged("SongId");
					this.OnSongIdChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_Deleted")]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_DeletedDate")]
		public System.Nullable<System.DateTime> DeletedDate
		{
			get
			{
				return this._DeletedDate;
			}
			set
			{
				if ((this._DeletedDate != value))
				{
					this.OnDeletedDateChanging(value);
					this.SendPropertyChanging();
					this._DeletedDate = value;
					this.SendPropertyChanged("DeletedDate");
					this.OnDeletedDateChanged();
				}
			}
		}
		
		[Column(Storage="_UpdatedDate")]
		public System.Nullable<System.DateTime> UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_Image", DbType="Image NOT NULL")]
		public byte[] Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[Column(Storage="_ContentType", CanBeNull=false)]
		public string ContentType
		{
			get
			{
				return this._ContentType;
			}
			set
			{
				if ((this._ContentType != value))
				{
					this.OnContentTypeChanging(value);
					this.SendPropertyChanging();
					this._ContentType = value;
					this.SendPropertyChanged("ContentType");
					this.OnContentTypeChanged();
				}
			}
		}
		
		[Column(Storage="_ContentLength")]
		public int ContentLength
		{
			get
			{
				return this._ContentLength;
			}
			set
			{
				if ((this._ContentLength != value))
				{
					this.OnContentLengthChanging(value);
					this.SendPropertyChanging();
					this._ContentLength = value;
					this.SendPropertyChanged("ContentLength");
					this.OnContentLengthChanged();
				}
			}
		}
		
		[Column(Storage="_UserId")]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_Thumbnail")]
		public bool Thumbnail
		{
			get
			{
				return this._Thumbnail;
			}
			set
			{
				if ((this._Thumbnail != value))
				{
					this.OnThumbnailChanging(value);
					this.SendPropertyChanging();
					this._Thumbnail = value;
					this.SendPropertyChanged("Thumbnail");
					this.OnThumbnailChanged();
				}
			}
		}
		
		[Association(Name="Photo_Poster", Storage="_Posters", ThisKey="PhotoId", OtherKey="PhotoId")]
		public EntitySet<Poster> Posters
		{
			get
			{
				return this._Posters;
			}
			set
			{
				this._Posters.Assign(value);
			}
		}
		
		[Association(Name="Photo_TicketStub", Storage="_TicketStubs", ThisKey="PhotoId", OtherKey="PhotoId")]
		public EntitySet<TicketStub> TicketStubs
		{
			get
			{
				return this._TicketStubs;
			}
			set
			{
				this._TicketStubs.Assign(value);
			}
		}
		
		[Association(Name="Photo_Art", Storage="_Arts", ThisKey="PhotoId", OtherKey="PhotoId")]
		public EntitySet<Art> Arts
		{
			get
			{
				return this._Arts;
			}
			set
			{
				this._Arts.Assign(value);
			}
		}
		
		[Association(Name="Show_Photo", Storage="_Show", ThisKey="ShowId", OtherKey="ShowId", IsForeignKey=true)]
		public Show Show
		{
			get
			{
				return this._Show.Entity;
			}
			set
			{
				Show previousValue = this._Show.Entity;
				if (((previousValue != value) 
							|| (this._Show.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Show.Entity = null;
						previousValue.Photos.Remove(this);
					}
					this._Show.Entity = value;
					if ((value != null))
					{
						value.Photos.Add(this);
						this._ShowId = value.ShowId;
					}
					else
					{
						this._ShowId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Show");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Posters(Poster entity)
		{
			this.SendPropertyChanging();
			entity.Photo = this;
		}
		
		private void detach_Posters(Poster entity)
		{
			this.SendPropertyChanging();
			entity.Photo = null;
		}
		
		private void attach_TicketStubs(TicketStub entity)
		{
			this.SendPropertyChanging();
			entity.Photo = this;
		}
		
		private void detach_TicketStubs(TicketStub entity)
		{
			this.SendPropertyChanging();
			entity.Photo = null;
		}
		
		private void attach_Arts(Art entity)
		{
			this.SendPropertyChanging();
			entity.Photo = this;
		}
		
		private void detach_Arts(Art entity)
		{
			this.SendPropertyChanging();
			entity.Photo = null;
		}
	}
	
	[Table(Name="dbo.Video")]
	public partial class Video : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _VideoId;
		
		private string _Source;
		
		private string _Quality;
		
		private string _Notes;
		
		private string _FileLocation;
		
		private string _FileName;
		
		private string _Name;
		
		private double _Length;
		
		private short _Type;
		
		private System.Nullable<System.Guid> _ShowId;
		
		private System.Nullable<System.Guid> _SongId;
		
		private System.DateTime _CreatedDate;
		
		private bool _Deleted;
		
		private System.Nullable<System.DateTime> _DeletedDate;
		
		private System.Nullable<System.DateTime> _UpdatedDate;
		
		private EntityRef<Show> _Show;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVideoIdChanging(System.Guid value);
    partial void OnVideoIdChanged();
    partial void OnSourceChanging(string value);
    partial void OnSourceChanged();
    partial void OnQualityChanging(string value);
    partial void OnQualityChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnFileLocationChanging(string value);
    partial void OnFileLocationChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLengthChanging(double value);
    partial void OnLengthChanged();
    partial void OnTypeChanging(short value);
    partial void OnTypeChanged();
    partial void OnShowIdChanging(System.Nullable<System.Guid> value);
    partial void OnShowIdChanged();
    partial void OnSongIdChanging(System.Nullable<System.Guid> value);
    partial void OnSongIdChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    partial void OnDeletedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedDateChanged();
    partial void OnUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedDateChanged();
    #endregion
		
		public Video()
		{
			this._Show = default(EntityRef<Show>);
			OnCreated();
		}
		
		[Column(Storage="_VideoId", IsPrimaryKey=true)]
		public System.Guid VideoId
		{
			get
			{
				return this._VideoId;
			}
			set
			{
				if ((this._VideoId != value))
				{
					this.OnVideoIdChanging(value);
					this.SendPropertyChanging();
					this._VideoId = value;
					this.SendPropertyChanged("VideoId");
					this.OnVideoIdChanged();
				}
			}
		}
		
		[Column(Storage="_Source")]
		public string Source
		{
			get
			{
				return this._Source;
			}
			set
			{
				if ((this._Source != value))
				{
					this.OnSourceChanging(value);
					this.SendPropertyChanging();
					this._Source = value;
					this.SendPropertyChanged("Source");
					this.OnSourceChanged();
				}
			}
		}
		
		[Column(Storage="_Quality")]
		public string Quality
		{
			get
			{
				return this._Quality;
			}
			set
			{
				if ((this._Quality != value))
				{
					this.OnQualityChanging(value);
					this.SendPropertyChanging();
					this._Quality = value;
					this.SendPropertyChanged("Quality");
					this.OnQualityChanged();
				}
			}
		}
		
		[Column(Storage="_Notes")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[Column(Storage="_FileLocation")]
		public string FileLocation
		{
			get
			{
				return this._FileLocation;
			}
			set
			{
				if ((this._FileLocation != value))
				{
					this.OnFileLocationChanging(value);
					this.SendPropertyChanging();
					this._FileLocation = value;
					this.SendPropertyChanged("FileLocation");
					this.OnFileLocationChanged();
				}
			}
		}
		
		[Column(Storage="_FileName")]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[Column(Storage="_Name", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Length")]
		public double Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this.OnLengthChanging(value);
					this.SendPropertyChanging();
					this._Length = value;
					this.SendPropertyChanged("Length");
					this.OnLengthChanged();
				}
			}
		}
		
		[Column(Storage="_Type")]
		public short Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_ShowId")]
		public System.Nullable<System.Guid> ShowId
		{
			get
			{
				return this._ShowId;
			}
			set
			{
				if ((this._ShowId != value))
				{
					if (this._Show.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShowIdChanging(value);
					this.SendPropertyChanging();
					this._ShowId = value;
					this.SendPropertyChanged("ShowId");
					this.OnShowIdChanged();
				}
			}
		}
		
		[Column(Storage="_SongId")]
		public System.Nullable<System.Guid> SongId
		{
			get
			{
				return this._SongId;
			}
			set
			{
				if ((this._SongId != value))
				{
					this.OnSongIdChanging(value);
					this.SendPropertyChanging();
					this._SongId = value;
					this.SendPropertyChanged("SongId");
					this.OnSongIdChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_Deleted")]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_DeletedDate")]
		public System.Nullable<System.DateTime> DeletedDate
		{
			get
			{
				return this._DeletedDate;
			}
			set
			{
				if ((this._DeletedDate != value))
				{
					this.OnDeletedDateChanging(value);
					this.SendPropertyChanging();
					this._DeletedDate = value;
					this.SendPropertyChanged("DeletedDate");
					this.OnDeletedDateChanged();
				}
			}
		}
		
		[Column(Storage="_UpdatedDate")]
		public System.Nullable<System.DateTime> UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		[Association(Name="Show_Video", Storage="_Show", ThisKey="ShowId", OtherKey="ShowId", IsForeignKey=true)]
		public Show Show
		{
			get
			{
				return this._Show.Entity;
			}
			set
			{
				Show previousValue = this._Show.Entity;
				if (((previousValue != value) 
							|| (this._Show.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Show.Entity = null;
						previousValue.Videos.Remove(this);
					}
					this._Show.Entity = value;
					if ((value != null))
					{
						value.Videos.Add(this);
						this._ShowId = value.ShowId;
					}
					else
					{
						this._ShowId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Show");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="")]
	public partial class Post : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PostId;
		
		private string _Title;
		
		private string _TitleUrl;
		
		private System.DateTime _PostedDate;
		
		private string _PostedBy;
		
		private string _Entry;
		
		private System.DateTime _CreatedDate;
		
		private System.Nullable<System.DateTime> _DeletedDate;
		
		private bool _Deleted;
		
		private System.Nullable<System.DateTime> _UpdatedDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPostIdChanging(System.Guid value);
    partial void OnPostIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnTitleUrlChanging(string value);
    partial void OnTitleUrlChanged();
    partial void OnPostedDateChanging(System.DateTime value);
    partial void OnPostedDateChanged();
    partial void OnPostedByChanging(string value);
    partial void OnPostedByChanged();
    partial void OnEntryChanging(string value);
    partial void OnEntryChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnDeletedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedDateChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    partial void OnUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedDateChanged();
    #endregion
		
		public Post()
		{
			OnCreated();
		}
		
		[Column(Storage="_PostId", IsPrimaryKey=true)]
		public System.Guid PostId
		{
			get
			{
				return this._PostId;
			}
			set
			{
				if ((this._PostId != value))
				{
					this.OnPostIdChanging(value);
					this.SendPropertyChanging();
					this._PostId = value;
					this.SendPropertyChanged("PostId");
					this.OnPostIdChanged();
				}
			}
		}
		
		[Column(Storage="_Title", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_TitleUrl")]
		public string TitleUrl
		{
			get
			{
				return this._TitleUrl;
			}
			set
			{
				if ((this._TitleUrl != value))
				{
					this.OnTitleUrlChanging(value);
					this.SendPropertyChanging();
					this._TitleUrl = value;
					this.SendPropertyChanged("TitleUrl");
					this.OnTitleUrlChanged();
				}
			}
		}
		
		[Column(Storage="_PostedDate")]
		public System.DateTime PostedDate
		{
			get
			{
				return this._PostedDate;
			}
			set
			{
				if ((this._PostedDate != value))
				{
					this.OnPostedDateChanging(value);
					this.SendPropertyChanging();
					this._PostedDate = value;
					this.SendPropertyChanged("PostedDate");
					this.OnPostedDateChanged();
				}
			}
		}
		
		[Column(Storage="_PostedBy", CanBeNull=false)]
		public string PostedBy
		{
			get
			{
				return this._PostedBy;
			}
			set
			{
				if ((this._PostedBy != value))
				{
					this.OnPostedByChanging(value);
					this.SendPropertyChanging();
					this._PostedBy = value;
					this.SendPropertyChanged("PostedBy");
					this.OnPostedByChanged();
				}
			}
		}
		
		[Column(Storage="_Entry", CanBeNull=false)]
		public string Entry
		{
			get
			{
				return this._Entry;
			}
			set
			{
				if ((this._Entry != value))
				{
					this.OnEntryChanging(value);
					this.SendPropertyChanging();
					this._Entry = value;
					this.SendPropertyChanged("Entry");
					this.OnEntryChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_DeletedDate")]
		public System.Nullable<System.DateTime> DeletedDate
		{
			get
			{
				return this._DeletedDate;
			}
			set
			{
				if ((this._DeletedDate != value))
				{
					this.OnDeletedDateChanging(value);
					this.SendPropertyChanging();
					this._DeletedDate = value;
					this.SendPropertyChanged("DeletedDate");
					this.OnDeletedDateChanged();
				}
			}
		}
		
		[Column(Storage="_Deleted")]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_UpdatedDate")]
		public System.Nullable<System.DateTime> UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="")]
	public partial class Topic : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _TopicId;
		
		private string _TopicName;
		
		private short _Type;
		
		private System.DateTime _StartDate;
		
		private System.DateTime _EndDate;
		
		private System.DateTime _CreatedDate;
		
		private System.Nullable<System.DateTime> _UpdatedDate;
		
		private System.Nullable<System.DateTime> _DeletedDate;
		
		private bool _Deleted;
		
		private string _Notes;
		
		private System.Nullable<System.Guid> _TourId;
		
		private System.Nullable<System.Guid> _ShowId;
		
		private EntitySet<GuessWholeShow> _GuessWholeShows;
		
		private EntityRef<Tour> _Tour;
		
		private EntityRef<Show> _Show;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTopicIdChanging(System.Guid value);
    partial void OnTopicIdChanged();
    partial void OnTopicNameChanging(string value);
    partial void OnTopicNameChanged();
    partial void OnTypeChanging(short value);
    partial void OnTypeChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedDateChanged();
    partial void OnDeletedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedDateChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnTourIdChanging(System.Nullable<System.Guid> value);
    partial void OnTourIdChanged();
    partial void OnShowIdChanging(System.Nullable<System.Guid> value);
    partial void OnShowIdChanged();
    #endregion
		
		public Topic()
		{
			this._GuessWholeShows = new EntitySet<GuessWholeShow>(new Action<GuessWholeShow>(this.attach_GuessWholeShows), new Action<GuessWholeShow>(this.detach_GuessWholeShows));
			this._Tour = default(EntityRef<Tour>);
			this._Show = default(EntityRef<Show>);
			OnCreated();
		}
		
		[Column(Storage="_TopicId", IsPrimaryKey=true)]
		public System.Guid TopicId
		{
			get
			{
				return this._TopicId;
			}
			set
			{
				if ((this._TopicId != value))
				{
					this.OnTopicIdChanging(value);
					this.SendPropertyChanging();
					this._TopicId = value;
					this.SendPropertyChanged("TopicId");
					this.OnTopicIdChanged();
				}
			}
		}
		
		[Column(Storage="_TopicName", CanBeNull=false)]
		public string TopicName
		{
			get
			{
				return this._TopicName;
			}
			set
			{
				if ((this._TopicName != value))
				{
					this.OnTopicNameChanging(value);
					this.SendPropertyChanging();
					this._TopicName = value;
					this.SendPropertyChanged("TopicName");
					this.OnTopicNameChanged();
				}
			}
		}
		
		[Column(Storage="_Type")]
		public short Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_StartDate")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate")]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_UpdatedDate")]
		public System.Nullable<System.DateTime> UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_DeletedDate")]
		public System.Nullable<System.DateTime> DeletedDate
		{
			get
			{
				return this._DeletedDate;
			}
			set
			{
				if ((this._DeletedDate != value))
				{
					this.OnDeletedDateChanging(value);
					this.SendPropertyChanging();
					this._DeletedDate = value;
					this.SendPropertyChanged("DeletedDate");
					this.OnDeletedDateChanged();
				}
			}
		}
		
		[Column(Storage="_Deleted")]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_Notes")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[Column(Storage="_TourId")]
		public System.Nullable<System.Guid> TourId
		{
			get
			{
				return this._TourId;
			}
			set
			{
				if ((this._TourId != value))
				{
					if (this._Tour.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTourIdChanging(value);
					this.SendPropertyChanging();
					this._TourId = value;
					this.SendPropertyChanged("TourId");
					this.OnTourIdChanged();
				}
			}
		}
		
		[Column(Storage="_ShowId")]
		public System.Nullable<System.Guid> ShowId
		{
			get
			{
				return this._ShowId;
			}
			set
			{
				if ((this._ShowId != value))
				{
					if (this._Show.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShowIdChanging(value);
					this.SendPropertyChanging();
					this._ShowId = value;
					this.SendPropertyChanged("ShowId");
					this.OnShowIdChanged();
				}
			}
		}
		
		[Association(Name="Topic_GuessWholeShow", Storage="_GuessWholeShows", ThisKey="TopicId", OtherKey="GuessWholeShowId")]
		public EntitySet<GuessWholeShow> GuessWholeShows
		{
			get
			{
				return this._GuessWholeShows;
			}
			set
			{
				this._GuessWholeShows.Assign(value);
			}
		}
		
		[Association(Name="Tour_Topic", Storage="_Tour", ThisKey="TourId", OtherKey="TourId", IsForeignKey=true)]
		public Tour Tour
		{
			get
			{
				return this._Tour.Entity;
			}
			set
			{
				Tour previousValue = this._Tour.Entity;
				if (((previousValue != value) 
							|| (this._Tour.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tour.Entity = null;
						previousValue.Topics.Remove(this);
					}
					this._Tour.Entity = value;
					if ((value != null))
					{
						value.Topics.Add(this);
						this._TourId = value.TourId;
					}
					else
					{
						this._TourId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Tour");
				}
			}
		}
		
		[Association(Name="Show_Topic", Storage="_Show", ThisKey="ShowId", OtherKey="ShowId", IsForeignKey=true)]
		public Show Show
		{
			get
			{
				return this._Show.Entity;
			}
			set
			{
				Show previousValue = this._Show.Entity;
				if (((previousValue != value) 
							|| (this._Show.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Show.Entity = null;
						previousValue.Topics.Remove(this);
					}
					this._Show.Entity = value;
					if ((value != null))
					{
						value.Topics.Add(this);
						this._ShowId = value.ShowId;
					}
					else
					{
						this._ShowId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Show");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GuessWholeShows(GuessWholeShow entity)
		{
			this.SendPropertyChanging();
			entity.Topic = this;
		}
		
		private void detach_GuessWholeShows(GuessWholeShow entity)
		{
			this.SendPropertyChanging();
			entity.Topic = null;
		}
	}
	
	[Table(Name="")]
	public partial class GuessWholeShow : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GuessWholeShowId;
		
		private System.Guid _TopicId;
		
		private System.Guid _SetId;
		
		private System.DateTime _CreatedDate;
		
		private System.Nullable<System.DateTime> _UpdatedDate;
		
		private System.Nullable<System.DateTime> _DeletedDate;
		
		private bool _Deleted;
		
		private System.Guid _UserId;
		
		private bool _Official;
		
		private EntityRef<Topic> _Topic;
		
		private EntityRef<Set> _Set;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGuessWholeShowIdChanging(System.Guid value);
    partial void OnGuessWholeShowIdChanged();
    partial void OnTopicIdChanging(System.Guid value);
    partial void OnTopicIdChanged();
    partial void OnSetIdChanging(System.Guid value);
    partial void OnSetIdChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedDateChanged();
    partial void OnDeletedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedDateChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnOfficialChanging(bool value);
    partial void OnOfficialChanged();
    #endregion
		
		public GuessWholeShow()
		{
			this._Topic = default(EntityRef<Topic>);
			this._Set = default(EntityRef<Set>);
			OnCreated();
		}
		
		[Column(Storage="_GuessWholeShowId", IsPrimaryKey=true)]
		public System.Guid GuessWholeShowId
		{
			get
			{
				return this._GuessWholeShowId;
			}
			set
			{
				if ((this._GuessWholeShowId != value))
				{
					if (this._Topic.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGuessWholeShowIdChanging(value);
					this.SendPropertyChanging();
					this._GuessWholeShowId = value;
					this.SendPropertyChanged("GuessWholeShowId");
					this.OnGuessWholeShowIdChanged();
				}
			}
		}
		
		[Column(Storage="_TopicId")]
		public System.Guid TopicId
		{
			get
			{
				return this._TopicId;
			}
			set
			{
				if ((this._TopicId != value))
				{
					this.OnTopicIdChanging(value);
					this.SendPropertyChanging();
					this._TopicId = value;
					this.SendPropertyChanged("TopicId");
					this.OnTopicIdChanged();
				}
			}
		}
		
		[Column(Storage="_SetId")]
		public System.Guid SetId
		{
			get
			{
				return this._SetId;
			}
			set
			{
				if ((this._SetId != value))
				{
					if (this._Set.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSetIdChanging(value);
					this.SendPropertyChanging();
					this._SetId = value;
					this.SendPropertyChanged("SetId");
					this.OnSetIdChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_UpdatedDate")]
		public System.Nullable<System.DateTime> UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_DeletedDate")]
		public System.Nullable<System.DateTime> DeletedDate
		{
			get
			{
				return this._DeletedDate;
			}
			set
			{
				if ((this._DeletedDate != value))
				{
					this.OnDeletedDateChanging(value);
					this.SendPropertyChanging();
					this._DeletedDate = value;
					this.SendPropertyChanged("DeletedDate");
					this.OnDeletedDateChanged();
				}
			}
		}
		
		[Column(Storage="_Deleted")]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_UserId")]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_Official")]
		public bool Official
		{
			get
			{
				return this._Official;
			}
			set
			{
				if ((this._Official != value))
				{
					this.OnOfficialChanging(value);
					this.SendPropertyChanging();
					this._Official = value;
					this.SendPropertyChanged("Official");
					this.OnOfficialChanged();
				}
			}
		}
		
		[Association(Name="Topic_GuessWholeShow", Storage="_Topic", ThisKey="GuessWholeShowId", OtherKey="TopicId", IsForeignKey=true)]
		public Topic Topic
		{
			get
			{
				return this._Topic.Entity;
			}
			set
			{
				Topic previousValue = this._Topic.Entity;
				if (((previousValue != value) 
							|| (this._Topic.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Topic.Entity = null;
						previousValue.GuessWholeShows.Remove(this);
					}
					this._Topic.Entity = value;
					if ((value != null))
					{
						value.GuessWholeShows.Add(this);
						this._GuessWholeShowId = value.TopicId;
					}
					else
					{
						this._GuessWholeShowId = default(System.Guid);
					}
					this.SendPropertyChanged("Topic");
				}
			}
		}
		
		[Association(Name="Set_GuessWholeShow", Storage="_Set", ThisKey="SetId", OtherKey="SetId", IsForeignKey=true)]
		public Set Set
		{
			get
			{
				return this._Set.Entity;
			}
			set
			{
				Set previousValue = this._Set.Entity;
				if (((previousValue != value) 
							|| (this._Set.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Set.Entity = null;
						previousValue.GuessWholeShows = null;
					}
					this._Set.Entity = value;
					if ((value != null))
					{
						value.GuessWholeShows = this;
						this._SetId = value.SetId;
					}
					else
					{
						this._SetId = default(System.Guid);
					}
					this.SendPropertyChanged("Set");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="")]
	public partial class SetSong : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _SetSongId;
		
		private System.Nullable<System.Guid> _SetId;
		
		private System.Nullable<System.Guid> _SongId;
		
		private System.Nullable<double> _Length;
		
		private System.Nullable<short> _Order;
		
		private string _Tease;
		
		private string _Notes;
		
		private string _SpecialAppearances;
		
		private System.Nullable<short> _JamStyle;
		
		private bool _BustOut;
		
		private System.DateTime _CreatedDate;
		
		private System.Nullable<System.DateTime> _UpdatedDate;
		
		private System.Nullable<System.DateTime> _DeletedDate;
		
		private bool _Deleted;
		
		private string _SongName;
		
		private string _Album;
		
		private bool _Cover;
		
		private string _Abbreviation;
		
		private bool _Segue;
		
		private EntityRef<Set> _Set;
		
		private EntityRef<Song> _Song;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSetSongIdChanging(System.Guid value);
    partial void OnSetSongIdChanged();
    partial void OnSetIdChanging(System.Nullable<System.Guid> value);
    partial void OnSetIdChanged();
    partial void OnSongIdChanging(System.Nullable<System.Guid> value);
    partial void OnSongIdChanged();
    partial void OnLengthChanging(System.Nullable<double> value);
    partial void OnLengthChanged();
    partial void OnOrderChanging(System.Nullable<short> value);
    partial void OnOrderChanged();
    partial void OnTeaseChanging(string value);
    partial void OnTeaseChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnSpecialAppearancesChanging(string value);
    partial void OnSpecialAppearancesChanged();
    partial void OnJamStyleChanging(System.Nullable<short> value);
    partial void OnJamStyleChanged();
    partial void OnBustOutChanging(bool value);
    partial void OnBustOutChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedDateChanged();
    partial void OnDeletedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedDateChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    partial void OnSongNameChanging(string value);
    partial void OnSongNameChanged();
    partial void OnAlbumChanging(string value);
    partial void OnAlbumChanged();
    partial void OnCoverChanging(bool value);
    partial void OnCoverChanged();
    partial void OnAbbreviationChanging(string value);
    partial void OnAbbreviationChanged();
    partial void OnSegueChanging(bool value);
    partial void OnSegueChanged();
    #endregion
		
		public SetSong()
		{
			this._Set = default(EntityRef<Set>);
			this._Song = default(EntityRef<Song>);
			OnCreated();
		}
		
		[Column(Storage="_SetSongId", IsPrimaryKey=true)]
		public System.Guid SetSongId
		{
			get
			{
				return this._SetSongId;
			}
			set
			{
				if ((this._SetSongId != value))
				{
					this.OnSetSongIdChanging(value);
					this.SendPropertyChanging();
					this._SetSongId = value;
					this.SendPropertyChanged("SetSongId");
					this.OnSetSongIdChanged();
				}
			}
		}
		
		[Column(Storage="_SetId")]
		public System.Nullable<System.Guid> SetId
		{
			get
			{
				return this._SetId;
			}
			set
			{
				if ((this._SetId != value))
				{
					if (this._Set.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSetIdChanging(value);
					this.SendPropertyChanging();
					this._SetId = value;
					this.SendPropertyChanged("SetId");
					this.OnSetIdChanged();
				}
			}
		}
		
		[Column(Storage="_SongId")]
		public System.Nullable<System.Guid> SongId
		{
			get
			{
				return this._SongId;
			}
			set
			{
				if ((this._SongId != value))
				{
					if (this._Song.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSongIdChanging(value);
					this.SendPropertyChanging();
					this._SongId = value;
					this.SendPropertyChanged("SongId");
					this.OnSongIdChanged();
				}
			}
		}
		
		[Column(Storage="_Length")]
		public System.Nullable<double> Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this.OnLengthChanging(value);
					this.SendPropertyChanging();
					this._Length = value;
					this.SendPropertyChanged("Length");
					this.OnLengthChanged();
				}
			}
		}
		
		[Column(Storage="_Order")]
		public System.Nullable<short> Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[Column(Storage="_Tease")]
		public string Tease
		{
			get
			{
				return this._Tease;
			}
			set
			{
				if ((this._Tease != value))
				{
					this.OnTeaseChanging(value);
					this.SendPropertyChanging();
					this._Tease = value;
					this.SendPropertyChanged("Tease");
					this.OnTeaseChanged();
				}
			}
		}
		
		[Column(Storage="_Notes")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[Column(Storage="_SpecialAppearances")]
		public string SpecialAppearances
		{
			get
			{
				return this._SpecialAppearances;
			}
			set
			{
				if ((this._SpecialAppearances != value))
				{
					this.OnSpecialAppearancesChanging(value);
					this.SendPropertyChanging();
					this._SpecialAppearances = value;
					this.SendPropertyChanged("SpecialAppearances");
					this.OnSpecialAppearancesChanged();
				}
			}
		}
		
		[Column(Storage="_JamStyle")]
		public System.Nullable<short> JamStyle
		{
			get
			{
				return this._JamStyle;
			}
			set
			{
				if ((this._JamStyle != value))
				{
					this.OnJamStyleChanging(value);
					this.SendPropertyChanging();
					this._JamStyle = value;
					this.SendPropertyChanged("JamStyle");
					this.OnJamStyleChanged();
				}
			}
		}
		
		[Column(Storage="_BustOut")]
		public bool BustOut
		{
			get
			{
				return this._BustOut;
			}
			set
			{
				if ((this._BustOut != value))
				{
					this.OnBustOutChanging(value);
					this.SendPropertyChanging();
					this._BustOut = value;
					this.SendPropertyChanged("BustOut");
					this.OnBustOutChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_UpdatedDate")]
		public System.Nullable<System.DateTime> UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_DeletedDate")]
		public System.Nullable<System.DateTime> DeletedDate
		{
			get
			{
				return this._DeletedDate;
			}
			set
			{
				if ((this._DeletedDate != value))
				{
					this.OnDeletedDateChanging(value);
					this.SendPropertyChanging();
					this._DeletedDate = value;
					this.SendPropertyChanged("DeletedDate");
					this.OnDeletedDateChanged();
				}
			}
		}
		
		[Column(Storage="_Deleted")]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_SongName")]
		public string SongName
		{
			get
			{
				return this._SongName;
			}
			set
			{
				if ((this._SongName != value))
				{
					this.OnSongNameChanging(value);
					this.SendPropertyChanging();
					this._SongName = value;
					this.SendPropertyChanged("SongName");
					this.OnSongNameChanged();
				}
			}
		}
		
		[Column(Storage="_Album")]
		public string Album
		{
			get
			{
				return this._Album;
			}
			set
			{
				if ((this._Album != value))
				{
					this.OnAlbumChanging(value);
					this.SendPropertyChanging();
					this._Album = value;
					this.SendPropertyChanged("Album");
					this.OnAlbumChanged();
				}
			}
		}
		
		[Column(Storage="_Cover")]
		public bool Cover
		{
			get
			{
				return this._Cover;
			}
			set
			{
				if ((this._Cover != value))
				{
					this.OnCoverChanging(value);
					this.SendPropertyChanging();
					this._Cover = value;
					this.SendPropertyChanged("Cover");
					this.OnCoverChanged();
				}
			}
		}
		
		[Column(Storage="_Abbreviation")]
		public string Abbreviation
		{
			get
			{
				return this._Abbreviation;
			}
			set
			{
				if ((this._Abbreviation != value))
				{
					this.OnAbbreviationChanging(value);
					this.SendPropertyChanging();
					this._Abbreviation = value;
					this.SendPropertyChanged("Abbreviation");
					this.OnAbbreviationChanged();
				}
			}
		}
		
		[Column(Storage="_Segue")]
		public bool Segue
		{
			get
			{
				return this._Segue;
			}
			set
			{
				if ((this._Segue != value))
				{
					this.OnSegueChanging(value);
					this.SendPropertyChanging();
					this._Segue = value;
					this.SendPropertyChanged("Segue");
					this.OnSegueChanged();
				}
			}
		}
		
		[Association(Name="Set_SetSong", Storage="_Set", ThisKey="SetId", OtherKey="SetId", IsForeignKey=true)]
		public Set Set
		{
			get
			{
				return this._Set.Entity;
			}
			set
			{
				Set previousValue = this._Set.Entity;
				if (((previousValue != value) 
							|| (this._Set.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Set.Entity = null;
						previousValue.SetSongs.Remove(this);
					}
					this._Set.Entity = value;
					if ((value != null))
					{
						value.SetSongs.Add(this);
						this._SetId = value.SetId;
					}
					else
					{
						this._SetId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Set");
				}
			}
		}
		
		[Association(Name="Song_SetSong", Storage="_Song", ThisKey="SongId", OtherKey="SongId", IsForeignKey=true)]
		public Song Song
		{
			get
			{
				return this._Song.Entity;
			}
			set
			{
				Song previousValue = this._Song.Entity;
				if (((previousValue != value) 
							|| (this._Song.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Song.Entity = null;
						previousValue.SetSongs.Remove(this);
					}
					this._Song.Entity = value;
					if ((value != null))
					{
						value.SetSongs.Add(this);
						this._SongId = value.SongId;
					}
					else
					{
						this._SongId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Song");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.aspnet_Membership")]
	public partial class aspnet_Membership : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ApplicationId;
		
		private System.Guid _UserId;
		
		private string _Password;
		
		private int _PasswordFormat;
		
		private string _PasswordSalt;
		
		private string _MobilePIN;
		
		private string _Email;
		
		private string _LoweredEmail;
		
		private string _PasswordQuestion;
		
		private string _PasswordAnswer;
		
		private bool _IsApproved;
		
		private bool _IsLockedOut;
		
		private System.DateTime _CreateDate;
		
		private System.DateTime _LastLoginDate;
		
		private System.DateTime _LastPasswordChangedDate;
		
		private System.DateTime _LastLockoutDate;
		
		private int _FailedPasswordAttemptCount;
		
		private System.DateTime _FailedPasswordAttemptWindowStart;
		
		private int _FailedPasswordAnswerAttemptCount;
		
		private System.DateTime _FailedPasswordAnswerAttemptWindowStart;
		
		private string _Comment;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnPasswordFormatChanging(int value);
    partial void OnPasswordFormatChanged();
    partial void OnPasswordSaltChanging(string value);
    partial void OnPasswordSaltChanged();
    partial void OnMobilePINChanging(string value);
    partial void OnMobilePINChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnLoweredEmailChanging(string value);
    partial void OnLoweredEmailChanged();
    partial void OnPasswordQuestionChanging(string value);
    partial void OnPasswordQuestionChanged();
    partial void OnPasswordAnswerChanging(string value);
    partial void OnPasswordAnswerChanged();
    partial void OnIsApprovedChanging(bool value);
    partial void OnIsApprovedChanged();
    partial void OnIsLockedOutChanging(bool value);
    partial void OnIsLockedOutChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnLastLoginDateChanging(System.DateTime value);
    partial void OnLastLoginDateChanged();
    partial void OnLastPasswordChangedDateChanging(System.DateTime value);
    partial void OnLastPasswordChangedDateChanged();
    partial void OnLastLockoutDateChanging(System.DateTime value);
    partial void OnLastLockoutDateChanged();
    partial void OnFailedPasswordAttemptCountChanging(int value);
    partial void OnFailedPasswordAttemptCountChanged();
    partial void OnFailedPasswordAttemptWindowStartChanging(System.DateTime value);
    partial void OnFailedPasswordAttemptWindowStartChanged();
    partial void OnFailedPasswordAnswerAttemptCountChanging(int value);
    partial void OnFailedPasswordAnswerAttemptCountChanged();
    partial void OnFailedPasswordAnswerAttemptWindowStartChanging(System.DateTime value);
    partial void OnFailedPasswordAnswerAttemptWindowStartChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    #endregion
		
		public aspnet_Membership()
		{
			this._aspnet_User = default(EntityRef<aspnet_User>);
			OnCreated();
		}
		
		[Column(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_PasswordFormat", DbType="Int NOT NULL")]
		public int PasswordFormat
		{
			get
			{
				return this._PasswordFormat;
			}
			set
			{
				if ((this._PasswordFormat != value))
				{
					this.OnPasswordFormatChanging(value);
					this.SendPropertyChanging();
					this._PasswordFormat = value;
					this.SendPropertyChanged("PasswordFormat");
					this.OnPasswordFormatChanged();
				}
			}
		}
		
		[Column(Storage="_PasswordSalt", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string PasswordSalt
		{
			get
			{
				return this._PasswordSalt;
			}
			set
			{
				if ((this._PasswordSalt != value))
				{
					this.OnPasswordSaltChanging(value);
					this.SendPropertyChanging();
					this._PasswordSalt = value;
					this.SendPropertyChanged("PasswordSalt");
					this.OnPasswordSaltChanged();
				}
			}
		}
		
		[Column(Storage="_MobilePIN", DbType="NVarChar(16)")]
		public string MobilePIN
		{
			get
			{
				return this._MobilePIN;
			}
			set
			{
				if ((this._MobilePIN != value))
				{
					this.OnMobilePINChanging(value);
					this.SendPropertyChanging();
					this._MobilePIN = value;
					this.SendPropertyChanged("MobilePIN");
					this.OnMobilePINChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(256)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_LoweredEmail", DbType="NVarChar(256)")]
		public string LoweredEmail
		{
			get
			{
				return this._LoweredEmail;
			}
			set
			{
				if ((this._LoweredEmail != value))
				{
					this.OnLoweredEmailChanging(value);
					this.SendPropertyChanging();
					this._LoweredEmail = value;
					this.SendPropertyChanged("LoweredEmail");
					this.OnLoweredEmailChanged();
				}
			}
		}
		
		[Column(Storage="_PasswordQuestion", DbType="NVarChar(256)")]
		public string PasswordQuestion
		{
			get
			{
				return this._PasswordQuestion;
			}
			set
			{
				if ((this._PasswordQuestion != value))
				{
					this.OnPasswordQuestionChanging(value);
					this.SendPropertyChanging();
					this._PasswordQuestion = value;
					this.SendPropertyChanged("PasswordQuestion");
					this.OnPasswordQuestionChanged();
				}
			}
		}
		
		[Column(Storage="_PasswordAnswer", DbType="NVarChar(128)")]
		public string PasswordAnswer
		{
			get
			{
				return this._PasswordAnswer;
			}
			set
			{
				if ((this._PasswordAnswer != value))
				{
					this.OnPasswordAnswerChanging(value);
					this.SendPropertyChanging();
					this._PasswordAnswer = value;
					this.SendPropertyChanged("PasswordAnswer");
					this.OnPasswordAnswerChanged();
				}
			}
		}
		
		[Column(Storage="_IsApproved", DbType="Bit NOT NULL")]
		public bool IsApproved
		{
			get
			{
				return this._IsApproved;
			}
			set
			{
				if ((this._IsApproved != value))
				{
					this.OnIsApprovedChanging(value);
					this.SendPropertyChanging();
					this._IsApproved = value;
					this.SendPropertyChanged("IsApproved");
					this.OnIsApprovedChanged();
				}
			}
		}
		
		[Column(Storage="_IsLockedOut", DbType="Bit NOT NULL")]
		public bool IsLockedOut
		{
			get
			{
				return this._IsLockedOut;
			}
			set
			{
				if ((this._IsLockedOut != value))
				{
					this.OnIsLockedOutChanging(value);
					this.SendPropertyChanging();
					this._IsLockedOut = value;
					this.SendPropertyChanged("IsLockedOut");
					this.OnIsLockedOutChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastLoginDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastLoginDate
		{
			get
			{
				return this._LastLoginDate;
			}
			set
			{
				if ((this._LastLoginDate != value))
				{
					this.OnLastLoginDateChanging(value);
					this.SendPropertyChanging();
					this._LastLoginDate = value;
					this.SendPropertyChanged("LastLoginDate");
					this.OnLastLoginDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastPasswordChangedDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastPasswordChangedDate
		{
			get
			{
				return this._LastPasswordChangedDate;
			}
			set
			{
				if ((this._LastPasswordChangedDate != value))
				{
					this.OnLastPasswordChangedDateChanging(value);
					this.SendPropertyChanging();
					this._LastPasswordChangedDate = value;
					this.SendPropertyChanged("LastPasswordChangedDate");
					this.OnLastPasswordChangedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastLockoutDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastLockoutDate
		{
			get
			{
				return this._LastLockoutDate;
			}
			set
			{
				if ((this._LastLockoutDate != value))
				{
					this.OnLastLockoutDateChanging(value);
					this.SendPropertyChanging();
					this._LastLockoutDate = value;
					this.SendPropertyChanged("LastLockoutDate");
					this.OnLastLockoutDateChanged();
				}
			}
		}
		
		[Column(Storage="_FailedPasswordAttemptCount", DbType="Int NOT NULL")]
		public int FailedPasswordAttemptCount
		{
			get
			{
				return this._FailedPasswordAttemptCount;
			}
			set
			{
				if ((this._FailedPasswordAttemptCount != value))
				{
					this.OnFailedPasswordAttemptCountChanging(value);
					this.SendPropertyChanging();
					this._FailedPasswordAttemptCount = value;
					this.SendPropertyChanged("FailedPasswordAttemptCount");
					this.OnFailedPasswordAttemptCountChanged();
				}
			}
		}
		
		[Column(Storage="_FailedPasswordAttemptWindowStart", DbType="DateTime NOT NULL")]
		public System.DateTime FailedPasswordAttemptWindowStart
		{
			get
			{
				return this._FailedPasswordAttemptWindowStart;
			}
			set
			{
				if ((this._FailedPasswordAttemptWindowStart != value))
				{
					this.OnFailedPasswordAttemptWindowStartChanging(value);
					this.SendPropertyChanging();
					this._FailedPasswordAttemptWindowStart = value;
					this.SendPropertyChanged("FailedPasswordAttemptWindowStart");
					this.OnFailedPasswordAttemptWindowStartChanged();
				}
			}
		}
		
		[Column(Storage="_FailedPasswordAnswerAttemptCount", DbType="Int NOT NULL")]
		public int FailedPasswordAnswerAttemptCount
		{
			get
			{
				return this._FailedPasswordAnswerAttemptCount;
			}
			set
			{
				if ((this._FailedPasswordAnswerAttemptCount != value))
				{
					this.OnFailedPasswordAnswerAttemptCountChanging(value);
					this.SendPropertyChanging();
					this._FailedPasswordAnswerAttemptCount = value;
					this.SendPropertyChanged("FailedPasswordAnswerAttemptCount");
					this.OnFailedPasswordAnswerAttemptCountChanged();
				}
			}
		}
		
		[Column(Storage="_FailedPasswordAnswerAttemptWindowStart", DbType="DateTime NOT NULL")]
		public System.DateTime FailedPasswordAnswerAttemptWindowStart
		{
			get
			{
				return this._FailedPasswordAnswerAttemptWindowStart;
			}
			set
			{
				if ((this._FailedPasswordAnswerAttemptWindowStart != value))
				{
					this.OnFailedPasswordAnswerAttemptWindowStartChanging(value);
					this.SendPropertyChanging();
					this._FailedPasswordAnswerAttemptWindowStart = value;
					this.SendPropertyChanged("FailedPasswordAnswerAttemptWindowStart");
					this.OnFailedPasswordAnswerAttemptWindowStartChanged();
				}
			}
		}
		
		[Column(Storage="_Comment", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[Association(Name="aspnet_User_aspnet_Membership", Storage="_aspnet_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.aspnet_Membership = null;
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.aspnet_Membership = this;
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.aspnet_Users")]
	public partial class aspnet_User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ApplicationId;
		
		private System.Guid _UserId;
		
		private string _UserName;
		
		private string _LoweredUserName;
		
		private string _MobileAlias;
		
		private bool _IsAnonymous;
		
		private System.DateTime _LastActivityDate;
		
		private EntityRef<aspnet_Membership> _aspnet_Membership;
		
		private EntitySet<Profile> _Profiles;
		
		private EntitySet<FavoriteVersion> _FavoriteVersions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnLoweredUserNameChanging(string value);
    partial void OnLoweredUserNameChanged();
    partial void OnMobileAliasChanging(string value);
    partial void OnMobileAliasChanged();
    partial void OnIsAnonymousChanging(bool value);
    partial void OnIsAnonymousChanged();
    partial void OnLastActivityDateChanging(System.DateTime value);
    partial void OnLastActivityDateChanged();
    #endregion
		
		public aspnet_User()
		{
			this._aspnet_Membership = default(EntityRef<aspnet_Membership>);
			this._Profiles = new EntitySet<Profile>(new Action<Profile>(this.attach_Profiles), new Action<Profile>(this.detach_Profiles));
			this._FavoriteVersions = new EntitySet<FavoriteVersion>(new Action<FavoriteVersion>(this.attach_FavoriteVersions), new Action<FavoriteVersion>(this.detach_FavoriteVersions));
			OnCreated();
		}
		
		[Column(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_LoweredUserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string LoweredUserName
		{
			get
			{
				return this._LoweredUserName;
			}
			set
			{
				if ((this._LoweredUserName != value))
				{
					this.OnLoweredUserNameChanging(value);
					this.SendPropertyChanging();
					this._LoweredUserName = value;
					this.SendPropertyChanged("LoweredUserName");
					this.OnLoweredUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_MobileAlias", DbType="NVarChar(16)")]
		public string MobileAlias
		{
			get
			{
				return this._MobileAlias;
			}
			set
			{
				if ((this._MobileAlias != value))
				{
					this.OnMobileAliasChanging(value);
					this.SendPropertyChanging();
					this._MobileAlias = value;
					this.SendPropertyChanged("MobileAlias");
					this.OnMobileAliasChanged();
				}
			}
		}
		
		[Column(Storage="_IsAnonymous", DbType="Bit NOT NULL")]
		public bool IsAnonymous
		{
			get
			{
				return this._IsAnonymous;
			}
			set
			{
				if ((this._IsAnonymous != value))
				{
					this.OnIsAnonymousChanging(value);
					this.SendPropertyChanging();
					this._IsAnonymous = value;
					this.SendPropertyChanged("IsAnonymous");
					this.OnIsAnonymousChanged();
				}
			}
		}
		
		[Column(Storage="_LastActivityDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastActivityDate
		{
			get
			{
				return this._LastActivityDate;
			}
			set
			{
				if ((this._LastActivityDate != value))
				{
					this.OnLastActivityDateChanging(value);
					this.SendPropertyChanging();
					this._LastActivityDate = value;
					this.SendPropertyChanged("LastActivityDate");
					this.OnLastActivityDateChanged();
				}
			}
		}
		
		[Association(Name="aspnet_User_aspnet_Membership", Storage="_aspnet_Membership", ThisKey="UserId", OtherKey="UserId", IsUnique=true, IsForeignKey=false)]
		public aspnet_Membership aspnet_Membership
		{
			get
			{
				return this._aspnet_Membership.Entity;
			}
			set
			{
				aspnet_Membership previousValue = this._aspnet_Membership.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Membership.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Membership.Entity = null;
						previousValue.aspnet_User = null;
					}
					this._aspnet_Membership.Entity = value;
					if ((value != null))
					{
						value.aspnet_User = this;
					}
					this.SendPropertyChanged("aspnet_Membership");
				}
			}
		}
		
		[Association(Name="aspnet_User_Profile", Storage="_Profiles", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<Profile> Profiles
		{
			get
			{
				return this._Profiles;
			}
			set
			{
				this._Profiles.Assign(value);
			}
		}
		
		[Association(Name="aspnet_User_FavoriteVersion", Storage="_FavoriteVersions", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<FavoriteVersion> FavoriteVersions
		{
			get
			{
				return this._FavoriteVersions;
			}
			set
			{
				this._FavoriteVersions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Profiles(Profile entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
		}
		
		private void detach_Profiles(Profile entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
		}
		
		private void attach_FavoriteVersions(FavoriteVersion entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
		}
		
		private void detach_FavoriteVersions(FavoriteVersion entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
		}
	}
	
	[Table(Name="dbo.Profile")]
	public partial class Profile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ProfileId;
		
		private string _Name;
		
		private string _Email;
		
		private string _FavoriteAlbum;
		
		private System.Nullable<System.Guid> _FavoriteLiveShow;
		
		private System.Nullable<System.Guid> _FavoriteStudioSong;
		
		private System.Nullable<System.Guid> _FavoriteLiveSong;
		
		private string _LoveAboutPhish;
		
		private string _AboutYou;
		
		private System.Guid _UserId;
		
		private System.DateTime _CreatedDate;
		
		private System.Nullable<System.DateTime> _UpdatedDate;
		
		private System.Nullable<System.DateTime> _DeletedDate;
		
		private bool _Deleted;
		
		private System.Nullable<System.Guid> _FavoriteTour;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProfileIdChanging(System.Guid value);
    partial void OnProfileIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnFavoriteAlbumChanging(string value);
    partial void OnFavoriteAlbumChanged();
    partial void OnFavoriteLiveShowChanging(System.Nullable<System.Guid> value);
    partial void OnFavoriteLiveShowChanged();
    partial void OnFavoriteStudioSongChanging(System.Nullable<System.Guid> value);
    partial void OnFavoriteStudioSongChanged();
    partial void OnFavoriteLiveSongChanging(System.Nullable<System.Guid> value);
    partial void OnFavoriteLiveSongChanged();
    partial void OnLoveAboutPhishChanging(string value);
    partial void OnLoveAboutPhishChanged();
    partial void OnAboutYouChanging(string value);
    partial void OnAboutYouChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedDateChanged();
    partial void OnDeletedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedDateChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    partial void OnFavoriteTourChanging(System.Nullable<System.Guid> value);
    partial void OnFavoriteTourChanged();
    #endregion
		
		public Profile()
		{
			this._aspnet_User = default(EntityRef<aspnet_User>);
			OnCreated();
		}
		
		[Column(Storage="_ProfileId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ProfileId
		{
			get
			{
				return this._ProfileId;
			}
			set
			{
				if ((this._ProfileId != value))
				{
					this.OnProfileIdChanging(value);
					this.SendPropertyChanging();
					this._ProfileId = value;
					this.SendPropertyChanged("ProfileId");
					this.OnProfileIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="VarChar(100)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_FavoriteAlbum", DbType="VarChar(50)")]
		public string FavoriteAlbum
		{
			get
			{
				return this._FavoriteAlbum;
			}
			set
			{
				if ((this._FavoriteAlbum != value))
				{
					this.OnFavoriteAlbumChanging(value);
					this.SendPropertyChanging();
					this._FavoriteAlbum = value;
					this.SendPropertyChanged("FavoriteAlbum");
					this.OnFavoriteAlbumChanged();
				}
			}
		}
		
		[Column(Storage="_FavoriteLiveShow", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> FavoriteLiveShow
		{
			get
			{
				return this._FavoriteLiveShow;
			}
			set
			{
				if ((this._FavoriteLiveShow != value))
				{
					this.OnFavoriteLiveShowChanging(value);
					this.SendPropertyChanging();
					this._FavoriteLiveShow = value;
					this.SendPropertyChanged("FavoriteLiveShow");
					this.OnFavoriteLiveShowChanged();
				}
			}
		}
		
		[Column(Storage="_FavoriteStudioSong", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> FavoriteStudioSong
		{
			get
			{
				return this._FavoriteStudioSong;
			}
			set
			{
				if ((this._FavoriteStudioSong != value))
				{
					this.OnFavoriteStudioSongChanging(value);
					this.SendPropertyChanging();
					this._FavoriteStudioSong = value;
					this.SendPropertyChanged("FavoriteStudioSong");
					this.OnFavoriteStudioSongChanged();
				}
			}
		}
		
		[Column(Storage="_FavoriteLiveSong", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> FavoriteLiveSong
		{
			get
			{
				return this._FavoriteLiveSong;
			}
			set
			{
				if ((this._FavoriteLiveSong != value))
				{
					this.OnFavoriteLiveSongChanging(value);
					this.SendPropertyChanging();
					this._FavoriteLiveSong = value;
					this.SendPropertyChanged("FavoriteLiveSong");
					this.OnFavoriteLiveSongChanged();
				}
			}
		}
		
		[Column(Storage="_LoveAboutPhish", DbType="VarChar(MAX)")]
		public string LoveAboutPhish
		{
			get
			{
				return this._LoveAboutPhish;
			}
			set
			{
				if ((this._LoveAboutPhish != value))
				{
					this.OnLoveAboutPhishChanging(value);
					this.SendPropertyChanging();
					this._LoveAboutPhish = value;
					this.SendPropertyChanged("LoveAboutPhish");
					this.OnLoveAboutPhishChanged();
				}
			}
		}
		
		[Column(Storage="_AboutYou", DbType="VarChar(MAX)")]
		public string AboutYou
		{
			get
			{
				return this._AboutYou;
			}
			set
			{
				if ((this._AboutYou != value))
				{
					this.OnAboutYouChanging(value);
					this.SendPropertyChanging();
					this._AboutYou = value;
					this.SendPropertyChanged("AboutYou");
					this.OnAboutYouChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_UpdatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_DeletedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeletedDate
		{
			get
			{
				return this._DeletedDate;
			}
			set
			{
				if ((this._DeletedDate != value))
				{
					this.OnDeletedDateChanging(value);
					this.SendPropertyChanging();
					this._DeletedDate = value;
					this.SendPropertyChanged("DeletedDate");
					this.OnDeletedDateChanged();
				}
			}
		}
		
		[Column(Storage="_Deleted", DbType="Bit NOT NULL")]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_FavoriteTour")]
		public System.Nullable<System.Guid> FavoriteTour
		{
			get
			{
				return this._FavoriteTour;
			}
			set
			{
				if ((this._FavoriteTour != value))
				{
					this.OnFavoriteTourChanging(value);
					this.SendPropertyChanging();
					this._FavoriteTour = value;
					this.SendPropertyChanged("FavoriteTour");
					this.OnFavoriteTourChanged();
				}
			}
		}
		
		[Association(Name="aspnet_User_Profile", Storage="_aspnet_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.Profiles.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.Profiles.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.FavoriteVersion")]
	public partial class FavoriteVersion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _FavoriteVersionId;
		
		private System.Nullable<System.Guid> _SetSongId;
		
		private System.Guid _SongId;
		
		private System.Guid _UserId;
		
		private System.DateTime _CreatedDate;
		
		private System.Nullable<System.DateTime> _UpdatedDate;
		
		private System.Nullable<System.DateTime> _DeletedDate;
		
		private bool _Deleted;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFavoriteVersionIdChanging(System.Guid value);
    partial void OnFavoriteVersionIdChanged();
    partial void OnSetSongIdChanging(System.Nullable<System.Guid> value);
    partial void OnSetSongIdChanged();
    partial void OnSongIdChanging(System.Guid value);
    partial void OnSongIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedDateChanged();
    partial void OnDeletedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedDateChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    #endregion
		
		public FavoriteVersion()
		{
			this._aspnet_User = default(EntityRef<aspnet_User>);
			OnCreated();
		}
		
		[Column(Storage="_FavoriteVersionId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid FavoriteVersionId
		{
			get
			{
				return this._FavoriteVersionId;
			}
			set
			{
				if ((this._FavoriteVersionId != value))
				{
					this.OnFavoriteVersionIdChanging(value);
					this.SendPropertyChanging();
					this._FavoriteVersionId = value;
					this.SendPropertyChanged("FavoriteVersionId");
					this.OnFavoriteVersionIdChanged();
				}
			}
		}
		
		[Column(Storage="_SetSongId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> SetSongId
		{
			get
			{
				return this._SetSongId;
			}
			set
			{
				if ((this._SetSongId != value))
				{
					this.OnSetSongIdChanging(value);
					this.SendPropertyChanging();
					this._SetSongId = value;
					this.SendPropertyChanged("SetSongId");
					this.OnSetSongIdChanged();
				}
			}
		}
		
		[Column(Storage="_SongId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SongId
		{
			get
			{
				return this._SongId;
			}
			set
			{
				if ((this._SongId != value))
				{
					this.OnSongIdChanging(value);
					this.SendPropertyChanging();
					this._SongId = value;
					this.SendPropertyChanged("SongId");
					this.OnSongIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_UpdatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_DeletedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeletedDate
		{
			get
			{
				return this._DeletedDate;
			}
			set
			{
				if ((this._DeletedDate != value))
				{
					this.OnDeletedDateChanging(value);
					this.SendPropertyChanging();
					this._DeletedDate = value;
					this.SendPropertyChanged("DeletedDate");
					this.OnDeletedDateChanged();
				}
			}
		}
		
		[Column(Storage="_Deleted", DbType="Bit NOT NULL")]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[Association(Name="aspnet_User_FavoriteVersion", Storage="_aspnet_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.FavoriteVersions.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.FavoriteVersions.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Poster")]
	public partial class Poster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PosterId;
		
		private string _Creator;
		
		private string _Notes;
		
		private System.Guid _PhotoId;
		
		private System.Nullable<int> _Total;
		
		private System.Nullable<int> _Number;
		
		private System.Nullable<double> _Width;
		
		private System.Nullable<double> _Length;
		
		private string _Technique;
		
		private System.Nullable<short> _Status;
		
		private System.Nullable<System.DateTime> _ReleaseDate;
		
		private string _Title;
		
		private System.DateTime _CreatedDate;
		
		private System.Nullable<System.DateTime> _UpdatedDate;
		
		private System.Nullable<System.DateTime> _DeletedDate;
		
		private bool _Deleted;
		
		private System.Nullable<System.Guid> _UserId;
		
		private System.Nullable<System.Guid> _ShowId;
		
		private EntitySet<MyShowPoster> _MyShowPosters;
		
		private EntityRef<Show> _Show;
		
		private EntityRef<Photo> _Photo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPosterIdChanging(System.Guid value);
    partial void OnPosterIdChanged();
    partial void OnCreatorChanging(string value);
    partial void OnCreatorChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnPhotoIdChanging(System.Guid value);
    partial void OnPhotoIdChanged();
    partial void OnTotalChanging(System.Nullable<int> value);
    partial void OnTotalChanged();
    partial void OnNumberChanging(System.Nullable<int> value);
    partial void OnNumberChanged();
    partial void OnWidthChanging(System.Nullable<double> value);
    partial void OnWidthChanged();
    partial void OnLengthChanging(System.Nullable<double> value);
    partial void OnLengthChanged();
    partial void OnTechniqueChanging(string value);
    partial void OnTechniqueChanged();
    partial void OnStatusChanging(System.Nullable<short> value);
    partial void OnStatusChanged();
    partial void OnReleaseDateChanging(System.Nullable<System.DateTime> value);
    partial void OnReleaseDateChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedDateChanged();
    partial void OnDeletedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedDateChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    partial void OnUserIdChanging(System.Nullable<System.Guid> value);
    partial void OnUserIdChanged();
    partial void OnShowIdChanging(System.Nullable<System.Guid> value);
    partial void OnShowIdChanged();
    #endregion
		
		public Poster()
		{
			this._MyShowPosters = new EntitySet<MyShowPoster>(new Action<MyShowPoster>(this.attach_MyShowPosters), new Action<MyShowPoster>(this.detach_MyShowPosters));
			this._Show = default(EntityRef<Show>);
			this._Photo = default(EntityRef<Photo>);
			OnCreated();
		}
		
		[Column(Storage="_PosterId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PosterId
		{
			get
			{
				return this._PosterId;
			}
			set
			{
				if ((this._PosterId != value))
				{
					this.OnPosterIdChanging(value);
					this.SendPropertyChanging();
					this._PosterId = value;
					this.SendPropertyChanged("PosterId");
					this.OnPosterIdChanged();
				}
			}
		}
		
		[Column(Storage="_Creator", DbType="NVarChar(100)")]
		public string Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					this.OnCreatorChanging(value);
					this.SendPropertyChanging();
					this._Creator = value;
					this.SendPropertyChanged("Creator");
					this.OnCreatorChanged();
				}
			}
		}
		
		[Column(Storage="_Notes", DbType="NVarChar(MAX)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[Column(Storage="_PhotoId", DbType="UniqueIdentifier")]
		public System.Guid PhotoId
		{
			get
			{
				return this._PhotoId;
			}
			set
			{
				if ((this._PhotoId != value))
				{
					if (this._Show.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhotoIdChanging(value);
					this.SendPropertyChanging();
					this._PhotoId = value;
					this.SendPropertyChanged("PhotoId");
					this.OnPhotoIdChanged();
				}
			}
		}
		
		[Column(Storage="_Total", DbType="Int")]
		public System.Nullable<int> Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					this.OnTotalChanging(value);
					this.SendPropertyChanging();
					this._Total = value;
					this.SendPropertyChanged("Total");
					this.OnTotalChanged();
				}
			}
		}
		
		[Column(Storage="_Number", DbType="Int")]
		public System.Nullable<int> Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[Column(Storage="_Width", DbType="Float")]
		public System.Nullable<double> Width
		{
			get
			{
				return this._Width;
			}
			set
			{
				if ((this._Width != value))
				{
					this.OnWidthChanging(value);
					this.SendPropertyChanging();
					this._Width = value;
					this.SendPropertyChanged("Width");
					this.OnWidthChanged();
				}
			}
		}
		
		[Column(Storage="_Length", DbType="Float")]
		public System.Nullable<double> Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this.OnLengthChanging(value);
					this.SendPropertyChanging();
					this._Length = value;
					this.SendPropertyChanged("Length");
					this.OnLengthChanged();
				}
			}
		}
		
		[Column(Storage="_Technique", DbType="VarChar(100)")]
		public string Technique
		{
			get
			{
				return this._Technique;
			}
			set
			{
				if ((this._Technique != value))
				{
					this.OnTechniqueChanging(value);
					this.SendPropertyChanging();
					this._Technique = value;
					this.SendPropertyChanged("Technique");
					this.OnTechniqueChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="TinyInt")]
		public System.Nullable<short> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Storage="_ReleaseDate", DbType="Date")]
		public System.Nullable<System.DateTime> ReleaseDate
		{
			get
			{
				return this._ReleaseDate;
			}
			set
			{
				if ((this._ReleaseDate != value))
				{
					this.OnReleaseDateChanging(value);
					this.SendPropertyChanging();
					this._ReleaseDate = value;
					this.SendPropertyChanged("ReleaseDate");
					this.OnReleaseDateChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="VarChar(100)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_UpdatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_DeletedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeletedDate
		{
			get
			{
				return this._DeletedDate;
			}
			set
			{
				if ((this._DeletedDate != value))
				{
					this.OnDeletedDateChanging(value);
					this.SendPropertyChanging();
					this._DeletedDate = value;
					this.SendPropertyChanged("DeletedDate");
					this.OnDeletedDateChanged();
				}
			}
		}
		
		[Column(Storage="_Deleted", DbType="Bit NOT NULL")]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_UserId")]
		public System.Nullable<System.Guid> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_ShowId")]
		public System.Nullable<System.Guid> ShowId
		{
			get
			{
				return this._ShowId;
			}
			set
			{
				if ((this._ShowId != value))
				{
					this.OnShowIdChanging(value);
					this.SendPropertyChanging();
					this._ShowId = value;
					this.SendPropertyChanged("ShowId");
					this.OnShowIdChanged();
				}
			}
		}
		
		[Association(Name="Poster_MyShowPoster", Storage="_MyShowPosters", ThisKey="PosterId", OtherKey="PosterId")]
		public EntitySet<MyShowPoster> MyShowPosters
		{
			get
			{
				return this._MyShowPosters;
			}
			set
			{
				this._MyShowPosters.Assign(value);
			}
		}
		
		[Association(Name="Show_Poster", Storage="_Show", ThisKey="PhotoId", OtherKey="ShowId", IsForeignKey=true)]
		public Show Show
		{
			get
			{
				return this._Show.Entity;
			}
			set
			{
				Show previousValue = this._Show.Entity;
				if (((previousValue != value) 
							|| (this._Show.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Show.Entity = null;
						previousValue.Posters.Remove(this);
					}
					this._Show.Entity = value;
					if ((value != null))
					{
						value.Posters.Add(this);
						this._PhotoId = value.ShowId;
					}
					else
					{
						this._PhotoId = default(System.Guid);
					}
					this.SendPropertyChanged("Show");
				}
			}
		}
		
		[Association(Name="Photo_Poster", Storage="_Photo", ThisKey="PhotoId", OtherKey="PhotoId", IsForeignKey=true)]
		public Photo Photo
		{
			get
			{
				return this._Photo.Entity;
			}
			set
			{
				Photo previousValue = this._Photo.Entity;
				if (((previousValue != value) 
							|| (this._Photo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Photo.Entity = null;
						previousValue.Posters.Remove(this);
					}
					this._Photo.Entity = value;
					if ((value != null))
					{
						value.Posters.Add(this);
						this._PhotoId = value.PhotoId;
					}
					else
					{
						this._PhotoId = default(System.Guid);
					}
					this.SendPropertyChanged("Photo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MyShowPosters(MyShowPoster entity)
		{
			this.SendPropertyChanging();
			entity.Poster = this;
		}
		
		private void detach_MyShowPosters(MyShowPoster entity)
		{
			this.SendPropertyChanging();
			entity.Poster = null;
		}
	}
	
	[Table(Name="dbo.TicketStub")]
	public partial class TicketStub : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _TicketStubId;
		
		private string _Notes;
		
		private System.Guid _PhotoId;
		
		private System.Nullable<System.Guid> _ShowId;
		
		private bool _Original;
		
		private System.DateTime _CreatedDate;
		
		private System.Nullable<System.DateTime> _UpdatedDate;
		
		private System.Nullable<System.DateTime> _DeletedDate;
		
		private bool _Deleted;
		
		private System.Nullable<System.Guid> _UserId;
		
		private EntitySet<MyShowTicketStub> _MyShowTicketStubs;
		
		private EntityRef<Show> _Show;
		
		private EntityRef<Photo> _Photo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTicketStubIdChanging(System.Guid value);
    partial void OnTicketStubIdChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnPhotoIdChanging(System.Guid value);
    partial void OnPhotoIdChanged();
    partial void OnShowIdChanging(System.Nullable<System.Guid> value);
    partial void OnShowIdChanged();
    partial void OnOriginalChanging(bool value);
    partial void OnOriginalChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedDateChanged();
    partial void OnDeletedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedDateChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    partial void OnUserIdChanging(System.Nullable<System.Guid> value);
    partial void OnUserIdChanged();
    #endregion
		
		public TicketStub()
		{
			this._MyShowTicketStubs = new EntitySet<MyShowTicketStub>(new Action<MyShowTicketStub>(this.attach_MyShowTicketStubs), new Action<MyShowTicketStub>(this.detach_MyShowTicketStubs));
			this._Show = default(EntityRef<Show>);
			this._Photo = default(EntityRef<Photo>);
			OnCreated();
		}
		
		[Column(Storage="_TicketStubId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid TicketStubId
		{
			get
			{
				return this._TicketStubId;
			}
			set
			{
				if ((this._TicketStubId != value))
				{
					this.OnTicketStubIdChanging(value);
					this.SendPropertyChanging();
					this._TicketStubId = value;
					this.SendPropertyChanged("TicketStubId");
					this.OnTicketStubIdChanged();
				}
			}
		}
		
		[Column(Storage="_Notes", DbType="NVarChar(MAX)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[Column(Storage="_PhotoId", DbType="UniqueIdentifier")]
		public System.Guid PhotoId
		{
			get
			{
				return this._PhotoId;
			}
			set
			{
				if ((this._PhotoId != value))
				{
					if (this._Show.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhotoIdChanging(value);
					this.SendPropertyChanging();
					this._PhotoId = value;
					this.SendPropertyChanged("PhotoId");
					this.OnPhotoIdChanged();
				}
			}
		}
		
		[Column(Storage="_ShowId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ShowId
		{
			get
			{
				return this._ShowId;
			}
			set
			{
				if ((this._ShowId != value))
				{
					this.OnShowIdChanging(value);
					this.SendPropertyChanging();
					this._ShowId = value;
					this.SendPropertyChanged("ShowId");
					this.OnShowIdChanged();
				}
			}
		}
		
		[Column(Storage="_Original", DbType="Bit")]
		public bool Original
		{
			get
			{
				return this._Original;
			}
			set
			{
				if ((this._Original != value))
				{
					this.OnOriginalChanging(value);
					this.SendPropertyChanging();
					this._Original = value;
					this.SendPropertyChanged("Original");
					this.OnOriginalChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_UpdatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_DeletedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeletedDate
		{
			get
			{
				return this._DeletedDate;
			}
			set
			{
				if ((this._DeletedDate != value))
				{
					this.OnDeletedDateChanging(value);
					this.SendPropertyChanging();
					this._DeletedDate = value;
					this.SendPropertyChanged("DeletedDate");
					this.OnDeletedDateChanged();
				}
			}
		}
		
		[Column(Storage="_Deleted", DbType="Bit NOT NULL")]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_UserId")]
		public System.Nullable<System.Guid> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Association(Name="TicketStub_MyShowTicketStub", Storage="_MyShowTicketStubs", ThisKey="TicketStubId", OtherKey="TicketStubId")]
		public EntitySet<MyShowTicketStub> MyShowTicketStubs
		{
			get
			{
				return this._MyShowTicketStubs;
			}
			set
			{
				this._MyShowTicketStubs.Assign(value);
			}
		}
		
		[Association(Name="Show_TicketStub", Storage="_Show", ThisKey="PhotoId", OtherKey="ShowId", IsForeignKey=true)]
		public Show Show
		{
			get
			{
				return this._Show.Entity;
			}
			set
			{
				Show previousValue = this._Show.Entity;
				if (((previousValue != value) 
							|| (this._Show.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Show.Entity = null;
						previousValue.TicketStubs.Remove(this);
					}
					this._Show.Entity = value;
					if ((value != null))
					{
						value.TicketStubs.Add(this);
						this._PhotoId = value.ShowId;
					}
					else
					{
						this._PhotoId = default(System.Guid);
					}
					this.SendPropertyChanged("Show");
				}
			}
		}
		
		[Association(Name="Photo_TicketStub", Storage="_Photo", ThisKey="PhotoId", OtherKey="PhotoId", IsForeignKey=true)]
		public Photo Photo
		{
			get
			{
				return this._Photo.Entity;
			}
			set
			{
				Photo previousValue = this._Photo.Entity;
				if (((previousValue != value) 
							|| (this._Photo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Photo.Entity = null;
						previousValue.TicketStubs.Remove(this);
					}
					this._Photo.Entity = value;
					if ((value != null))
					{
						value.TicketStubs.Add(this);
						this._PhotoId = value.PhotoId;
					}
					else
					{
						this._PhotoId = default(System.Guid);
					}
					this.SendPropertyChanged("Photo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MyShowTicketStubs(MyShowTicketStub entity)
		{
			this.SendPropertyChanging();
			entity.TicketStub = this;
		}
		
		private void detach_MyShowTicketStubs(MyShowTicketStub entity)
		{
			this.SendPropertyChanging();
			entity.TicketStub = null;
		}
	}
	
	[Table(Name="dbo.Art")]
	public partial class Art : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ArtId;
		
		private string _Creator;
		
		private string _Notes;
		
		private System.Nullable<System.Guid> _ShowId;
		
		private System.Nullable<System.Guid> _UserId;
		
		private System.Guid _PhotoId;
		
		private System.DateTime _CreatedDate;
		
		private System.Nullable<System.DateTime> _UpdatedDate;
		
		private System.Nullable<System.DateTime> _DeletedDate;
		
		private bool _Deleted;
		
		private EntitySet<MyShowArt> _MyShowArts;
		
		private EntityRef<Show> _Show;
		
		private EntityRef<Photo> _Photo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnArtIdChanging(System.Guid value);
    partial void OnArtIdChanged();
    partial void OnCreatorChanging(string value);
    partial void OnCreatorChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnShowIdChanging(System.Nullable<System.Guid> value);
    partial void OnShowIdChanged();
    partial void OnUserIdChanging(System.Nullable<System.Guid> value);
    partial void OnUserIdChanged();
    partial void OnPhotoIdChanging(System.Guid value);
    partial void OnPhotoIdChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedDateChanged();
    partial void OnDeletedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedDateChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    #endregion
		
		public Art()
		{
			this._MyShowArts = new EntitySet<MyShowArt>(new Action<MyShowArt>(this.attach_MyShowArts), new Action<MyShowArt>(this.detach_MyShowArts));
			this._Show = default(EntityRef<Show>);
			this._Photo = default(EntityRef<Photo>);
			OnCreated();
		}
		
		[Column(Storage="_ArtId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ArtId
		{
			get
			{
				return this._ArtId;
			}
			set
			{
				if ((this._ArtId != value))
				{
					this.OnArtIdChanging(value);
					this.SendPropertyChanging();
					this._ArtId = value;
					this.SendPropertyChanged("ArtId");
					this.OnArtIdChanged();
				}
			}
		}
		
		[Column(Storage="_Creator", DbType="NVarChar(100)")]
		public string Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					this.OnCreatorChanging(value);
					this.SendPropertyChanging();
					this._Creator = value;
					this.SendPropertyChanged("Creator");
					this.OnCreatorChanged();
				}
			}
		}
		
		[Column(Storage="_Notes", DbType="NVarChar(MAX)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[Column(Storage="_ShowId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ShowId
		{
			get
			{
				return this._ShowId;
			}
			set
			{
				if ((this._ShowId != value))
				{
					if (this._Show.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShowIdChanging(value);
					this.SendPropertyChanging();
					this._ShowId = value;
					this.SendPropertyChanged("ShowId");
					this.OnShowIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_PhotoId", DbType="UniqueIdentifier")]
		public System.Guid PhotoId
		{
			get
			{
				return this._PhotoId;
			}
			set
			{
				if ((this._PhotoId != value))
				{
					if (this._Photo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhotoIdChanging(value);
					this.SendPropertyChanging();
					this._PhotoId = value;
					this.SendPropertyChanged("PhotoId");
					this.OnPhotoIdChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_UpdatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_DeletedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeletedDate
		{
			get
			{
				return this._DeletedDate;
			}
			set
			{
				if ((this._DeletedDate != value))
				{
					this.OnDeletedDateChanging(value);
					this.SendPropertyChanging();
					this._DeletedDate = value;
					this.SendPropertyChanged("DeletedDate");
					this.OnDeletedDateChanged();
				}
			}
		}
		
		[Column(Storage="_Deleted", DbType="Bit NOT NULL")]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[Association(Name="Art_MyShowArt", Storage="_MyShowArts", ThisKey="ArtId", OtherKey="ArtId")]
		public EntitySet<MyShowArt> MyShowArts
		{
			get
			{
				return this._MyShowArts;
			}
			set
			{
				this._MyShowArts.Assign(value);
			}
		}
		
		[Association(Name="Show_Art", Storage="_Show", ThisKey="ShowId", OtherKey="ShowId", IsForeignKey=true)]
		public Show Show
		{
			get
			{
				return this._Show.Entity;
			}
			set
			{
				Show previousValue = this._Show.Entity;
				if (((previousValue != value) 
							|| (this._Show.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Show.Entity = null;
						previousValue.Arts.Remove(this);
					}
					this._Show.Entity = value;
					if ((value != null))
					{
						value.Arts.Add(this);
						this._ShowId = value.ShowId;
					}
					else
					{
						this._ShowId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Show");
				}
			}
		}
		
		[Association(Name="Photo_Art", Storage="_Photo", ThisKey="PhotoId", OtherKey="PhotoId", IsForeignKey=true)]
		public Photo Photo
		{
			get
			{
				return this._Photo.Entity;
			}
			set
			{
				Photo previousValue = this._Photo.Entity;
				if (((previousValue != value) 
							|| (this._Photo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Photo.Entity = null;
						previousValue.Arts.Remove(this);
					}
					this._Photo.Entity = value;
					if ((value != null))
					{
						value.Arts.Add(this);
						this._PhotoId = value.PhotoId;
					}
					else
					{
						this._PhotoId = default(System.Guid);
					}
					this.SendPropertyChanged("Photo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MyShowArts(MyShowArt entity)
		{
			this.SendPropertyChanging();
			entity.Art = this;
		}
		
		private void detach_MyShowArts(MyShowArt entity)
		{
			this.SendPropertyChanging();
			entity.Art = null;
		}
	}
	
	[Table(Name="dbo.MyShow")]
	public partial class MyShow : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _MyShowId;
		
		private System.Guid _ShowId;
		
		private System.Guid _UserId;
		
		private System.DateTime _CreatedDate;
		
		private System.Nullable<System.DateTime> _UpdatedDate;
		
		private System.Nullable<System.DateTime> _DeletedDate;
		
		private bool _Deleted;
		
		private System.Nullable<int> _Rating;
		
		private string _Notes;
		
		private System.Nullable<System.DateTime> _NotesUpdatedDate;
		
		private EntitySet<MyShowPoster> _MyShowPosters;
		
		private EntitySet<MyShowTicketStub> _MyShowTicketStubs;
		
		private EntitySet<MyShowArt> _MyShowArts;
		
		private EntityRef<Show> _Show;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMyShowIdChanging(System.Guid value);
    partial void OnMyShowIdChanged();
    partial void OnShowIdChanging(System.Guid value);
    partial void OnShowIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedDateChanged();
    partial void OnDeletedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedDateChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    partial void OnRatingChanging(System.Nullable<int> value);
    partial void OnRatingChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnNotesUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnNotesUpdatedDateChanged();
    #endregion
		
		public MyShow()
		{
			this._MyShowPosters = new EntitySet<MyShowPoster>(new Action<MyShowPoster>(this.attach_MyShowPosters), new Action<MyShowPoster>(this.detach_MyShowPosters));
			this._MyShowTicketStubs = new EntitySet<MyShowTicketStub>(new Action<MyShowTicketStub>(this.attach_MyShowTicketStubs), new Action<MyShowTicketStub>(this.detach_MyShowTicketStubs));
			this._MyShowArts = new EntitySet<MyShowArt>(new Action<MyShowArt>(this.attach_MyShowArts), new Action<MyShowArt>(this.detach_MyShowArts));
			this._Show = default(EntityRef<Show>);
			OnCreated();
		}
		
		[Column(Storage="_MyShowId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid MyShowId
		{
			get
			{
				return this._MyShowId;
			}
			set
			{
				if ((this._MyShowId != value))
				{
					this.OnMyShowIdChanging(value);
					this.SendPropertyChanging();
					this._MyShowId = value;
					this.SendPropertyChanged("MyShowId");
					this.OnMyShowIdChanged();
				}
			}
		}
		
		[Column(Storage="_ShowId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ShowId
		{
			get
			{
				return this._ShowId;
			}
			set
			{
				if ((this._ShowId != value))
				{
					if (this._Show.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShowIdChanging(value);
					this.SendPropertyChanging();
					this._ShowId = value;
					this.SendPropertyChanged("ShowId");
					this.OnShowIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_UpdatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_DeletedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeletedDate
		{
			get
			{
				return this._DeletedDate;
			}
			set
			{
				if ((this._DeletedDate != value))
				{
					this.OnDeletedDateChanging(value);
					this.SendPropertyChanging();
					this._DeletedDate = value;
					this.SendPropertyChanged("DeletedDate");
					this.OnDeletedDateChanged();
				}
			}
		}
		
		[Column(Storage="_Deleted", DbType="Bit NOT NULL")]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_Rating", DbType="Int")]
		public System.Nullable<int> Rating
		{
			get
			{
				return this._Rating;
			}
			set
			{
				if ((this._Rating != value))
				{
					this.OnRatingChanging(value);
					this.SendPropertyChanging();
					this._Rating = value;
					this.SendPropertyChanged("Rating");
					this.OnRatingChanged();
				}
			}
		}
		
		[Column(Storage="_Notes")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[Column(Storage="_NotesUpdatedDate")]
		public System.Nullable<System.DateTime> NotesUpdatedDate
		{
			get
			{
				return this._NotesUpdatedDate;
			}
			set
			{
				if ((this._NotesUpdatedDate != value))
				{
					this.OnNotesUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._NotesUpdatedDate = value;
					this.SendPropertyChanged("NotesUpdatedDate");
					this.OnNotesUpdatedDateChanged();
				}
			}
		}
		
		[Association(Name="MyShow_MyShowPoster", Storage="_MyShowPosters", ThisKey="MyShowId", OtherKey="MyShowId")]
		public EntitySet<MyShowPoster> MyShowPosters
		{
			get
			{
				return this._MyShowPosters;
			}
			set
			{
				this._MyShowPosters.Assign(value);
			}
		}
		
		[Association(Name="MyShow_MyShowTicketStub", Storage="_MyShowTicketStubs", ThisKey="MyShowId", OtherKey="MyShowId")]
		public EntitySet<MyShowTicketStub> MyShowTicketStubs
		{
			get
			{
				return this._MyShowTicketStubs;
			}
			set
			{
				this._MyShowTicketStubs.Assign(value);
			}
		}
		
		[Association(Name="MyShow_MyShowArt", Storage="_MyShowArts", ThisKey="MyShowId", OtherKey="MyShowId")]
		public EntitySet<MyShowArt> MyShowArts
		{
			get
			{
				return this._MyShowArts;
			}
			set
			{
				this._MyShowArts.Assign(value);
			}
		}
		
		[Association(Name="Show_MyShow", Storage="_Show", ThisKey="ShowId", OtherKey="ShowId", IsForeignKey=true)]
		public Show Show
		{
			get
			{
				return this._Show.Entity;
			}
			set
			{
				Show previousValue = this._Show.Entity;
				if (((previousValue != value) 
							|| (this._Show.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Show.Entity = null;
						previousValue.MyShows.Remove(this);
					}
					this._Show.Entity = value;
					if ((value != null))
					{
						value.MyShows.Add(this);
						this._ShowId = value.ShowId;
					}
					else
					{
						this._ShowId = default(System.Guid);
					}
					this.SendPropertyChanged("Show");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MyShowPosters(MyShowPoster entity)
		{
			this.SendPropertyChanging();
			entity.MyShow = this;
		}
		
		private void detach_MyShowPosters(MyShowPoster entity)
		{
			this.SendPropertyChanging();
			entity.MyShow = null;
		}
		
		private void attach_MyShowTicketStubs(MyShowTicketStub entity)
		{
			this.SendPropertyChanging();
			entity.MyShow = this;
		}
		
		private void detach_MyShowTicketStubs(MyShowTicketStub entity)
		{
			this.SendPropertyChanging();
			entity.MyShow = null;
		}
		
		private void attach_MyShowArts(MyShowArt entity)
		{
			this.SendPropertyChanging();
			entity.MyShow = this;
		}
		
		private void detach_MyShowArts(MyShowArt entity)
		{
			this.SendPropertyChanging();
			entity.MyShow = null;
		}
	}
	
	[Table(Name="dbo.MyShowPoster")]
	public partial class MyShowPoster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _MyShowPosterId;
		
		private System.Guid _PosterId;
		
		private System.DateTime _CreatedDate;
		
		private System.Nullable<System.DateTime> _UpdatedDate;
		
		private System.Nullable<System.DateTime> _DeletedDate;
		
		private bool _Deleted;
		
		private System.Guid _MyShowId;
		
		private EntityRef<Poster> _Poster;
		
		private EntityRef<MyShow> _MyShow;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMyShowPosterIdChanging(System.Guid value);
    partial void OnMyShowPosterIdChanged();
    partial void OnPosterIdChanging(System.Guid value);
    partial void OnPosterIdChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedDateChanged();
    partial void OnDeletedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedDateChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    partial void OnMyShowIdChanging(System.Guid value);
    partial void OnMyShowIdChanged();
    #endregion
		
		public MyShowPoster()
		{
			this._Poster = default(EntityRef<Poster>);
			this._MyShow = default(EntityRef<MyShow>);
			OnCreated();
		}
		
		[Column(Storage="_MyShowPosterId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid MyShowPosterId
		{
			get
			{
				return this._MyShowPosterId;
			}
			set
			{
				if ((this._MyShowPosterId != value))
				{
					this.OnMyShowPosterIdChanging(value);
					this.SendPropertyChanging();
					this._MyShowPosterId = value;
					this.SendPropertyChanged("MyShowPosterId");
					this.OnMyShowPosterIdChanged();
				}
			}
		}
		
		[Column(Storage="_PosterId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid PosterId
		{
			get
			{
				return this._PosterId;
			}
			set
			{
				if ((this._PosterId != value))
				{
					if (this._Poster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPosterIdChanging(value);
					this.SendPropertyChanging();
					this._PosterId = value;
					this.SendPropertyChanged("PosterId");
					this.OnPosterIdChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_UpdatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_DeletedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeletedDate
		{
			get
			{
				return this._DeletedDate;
			}
			set
			{
				if ((this._DeletedDate != value))
				{
					this.OnDeletedDateChanging(value);
					this.SendPropertyChanging();
					this._DeletedDate = value;
					this.SendPropertyChanged("DeletedDate");
					this.OnDeletedDateChanged();
				}
			}
		}
		
		[Column(Storage="_Deleted", DbType="Bit NOT NULL")]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_MyShowId")]
		public System.Guid MyShowId
		{
			get
			{
				return this._MyShowId;
			}
			set
			{
				if ((this._MyShowId != value))
				{
					if (this._MyShow.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMyShowIdChanging(value);
					this.SendPropertyChanging();
					this._MyShowId = value;
					this.SendPropertyChanged("MyShowId");
					this.OnMyShowIdChanged();
				}
			}
		}
		
		[Association(Name="Poster_MyShowPoster", Storage="_Poster", ThisKey="PosterId", OtherKey="PosterId", IsForeignKey=true)]
		public Poster Poster
		{
			get
			{
				return this._Poster.Entity;
			}
			set
			{
				Poster previousValue = this._Poster.Entity;
				if (((previousValue != value) 
							|| (this._Poster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Poster.Entity = null;
						previousValue.MyShowPosters.Remove(this);
					}
					this._Poster.Entity = value;
					if ((value != null))
					{
						value.MyShowPosters.Add(this);
						this._PosterId = value.PosterId;
					}
					else
					{
						this._PosterId = default(System.Guid);
					}
					this.SendPropertyChanged("Poster");
				}
			}
		}
		
		[Association(Name="MyShow_MyShowPoster", Storage="_MyShow", ThisKey="MyShowId", OtherKey="MyShowId", IsForeignKey=true)]
		public MyShow MyShow
		{
			get
			{
				return this._MyShow.Entity;
			}
			set
			{
				MyShow previousValue = this._MyShow.Entity;
				if (((previousValue != value) 
							|| (this._MyShow.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MyShow.Entity = null;
						previousValue.MyShowPosters.Remove(this);
					}
					this._MyShow.Entity = value;
					if ((value != null))
					{
						value.MyShowPosters.Add(this);
						this._MyShowId = value.MyShowId;
					}
					else
					{
						this._MyShowId = default(System.Guid);
					}
					this.SendPropertyChanged("MyShow");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MyShowTicketStub")]
	public partial class MyShowTicketStub : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _MyShowTicketStubId;
		
		private System.Guid _MyShowId;
		
		private System.Guid _TicketStubId;
		
		private System.DateTime _CreatedDate;
		
		private System.Nullable<System.DateTime> _UpdatedDate;
		
		private System.Nullable<System.DateTime> _DeletedDate;
		
		private bool _Deleted;
		
		private EntityRef<TicketStub> _TicketStub;
		
		private EntityRef<MyShow> _MyShow;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMyShowTicketStubIdChanging(System.Guid value);
    partial void OnMyShowTicketStubIdChanged();
    partial void OnMyShowIdChanging(System.Guid value);
    partial void OnMyShowIdChanged();
    partial void OnTicketStubIdChanging(System.Guid value);
    partial void OnTicketStubIdChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedDateChanged();
    partial void OnDeletedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedDateChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    #endregion
		
		public MyShowTicketStub()
		{
			this._TicketStub = default(EntityRef<TicketStub>);
			this._MyShow = default(EntityRef<MyShow>);
			OnCreated();
		}
		
		[Column(Storage="_MyShowTicketStubId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid MyShowTicketStubId
		{
			get
			{
				return this._MyShowTicketStubId;
			}
			set
			{
				if ((this._MyShowTicketStubId != value))
				{
					this.OnMyShowTicketStubIdChanging(value);
					this.SendPropertyChanging();
					this._MyShowTicketStubId = value;
					this.SendPropertyChanged("MyShowTicketStubId");
					this.OnMyShowTicketStubIdChanged();
				}
			}
		}
		
		[Column(Storage="_MyShowId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid MyShowId
		{
			get
			{
				return this._MyShowId;
			}
			set
			{
				if ((this._MyShowId != value))
				{
					if (this._MyShow.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMyShowIdChanging(value);
					this.SendPropertyChanging();
					this._MyShowId = value;
					this.SendPropertyChanged("MyShowId");
					this.OnMyShowIdChanged();
				}
			}
		}
		
		[Column(Storage="_TicketStubId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TicketStubId
		{
			get
			{
				return this._TicketStubId;
			}
			set
			{
				if ((this._TicketStubId != value))
				{
					if (this._TicketStub.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTicketStubIdChanging(value);
					this.SendPropertyChanging();
					this._TicketStubId = value;
					this.SendPropertyChanged("TicketStubId");
					this.OnTicketStubIdChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_UpdatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_DeletedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeletedDate
		{
			get
			{
				return this._DeletedDate;
			}
			set
			{
				if ((this._DeletedDate != value))
				{
					this.OnDeletedDateChanging(value);
					this.SendPropertyChanging();
					this._DeletedDate = value;
					this.SendPropertyChanged("DeletedDate");
					this.OnDeletedDateChanged();
				}
			}
		}
		
		[Column(Storage="_Deleted", DbType="Bit NOT NULL")]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[Association(Name="TicketStub_MyShowTicketStub", Storage="_TicketStub", ThisKey="TicketStubId", OtherKey="TicketStubId", IsForeignKey=true)]
		public TicketStub TicketStub
		{
			get
			{
				return this._TicketStub.Entity;
			}
			set
			{
				TicketStub previousValue = this._TicketStub.Entity;
				if (((previousValue != value) 
							|| (this._TicketStub.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TicketStub.Entity = null;
						previousValue.MyShowTicketStubs.Remove(this);
					}
					this._TicketStub.Entity = value;
					if ((value != null))
					{
						value.MyShowTicketStubs.Add(this);
						this._TicketStubId = value.TicketStubId;
					}
					else
					{
						this._TicketStubId = default(System.Guid);
					}
					this.SendPropertyChanged("TicketStub");
				}
			}
		}
		
		[Association(Name="MyShow_MyShowTicketStub", Storage="_MyShow", ThisKey="MyShowId", OtherKey="MyShowId", IsForeignKey=true)]
		public MyShow MyShow
		{
			get
			{
				return this._MyShow.Entity;
			}
			set
			{
				MyShow previousValue = this._MyShow.Entity;
				if (((previousValue != value) 
							|| (this._MyShow.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MyShow.Entity = null;
						previousValue.MyShowTicketStubs.Remove(this);
					}
					this._MyShow.Entity = value;
					if ((value != null))
					{
						value.MyShowTicketStubs.Add(this);
						this._MyShowId = value.MyShowId;
					}
					else
					{
						this._MyShowId = default(System.Guid);
					}
					this.SendPropertyChanged("MyShow");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MyShowArt")]
	public partial class MyShowArt : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _MyShowArtId;
		
		private System.Guid _MyShowId;
		
		private System.Guid _ArtId;
		
		private System.DateTime _CreatedDate;
		
		private System.Nullable<System.DateTime> _UpdatedDate;
		
		private System.Nullable<System.DateTime> _DeletedDate;
		
		private bool _Deleted;
		
		private EntityRef<Art> _Art;
		
		private EntityRef<MyShow> _MyShow;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMyShowArtIdChanging(System.Guid value);
    partial void OnMyShowArtIdChanged();
    partial void OnMyShowIdChanging(System.Guid value);
    partial void OnMyShowIdChanged();
    partial void OnArtIdChanging(System.Guid value);
    partial void OnArtIdChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedDateChanged();
    partial void OnDeletedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedDateChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    #endregion
		
		public MyShowArt()
		{
			this._Art = default(EntityRef<Art>);
			this._MyShow = default(EntityRef<MyShow>);
			OnCreated();
		}
		
		[Column(Storage="_MyShowArtId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid MyShowArtId
		{
			get
			{
				return this._MyShowArtId;
			}
			set
			{
				if ((this._MyShowArtId != value))
				{
					this.OnMyShowArtIdChanging(value);
					this.SendPropertyChanging();
					this._MyShowArtId = value;
					this.SendPropertyChanged("MyShowArtId");
					this.OnMyShowArtIdChanged();
				}
			}
		}
		
		[Column(Storage="_MyShowId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid MyShowId
		{
			get
			{
				return this._MyShowId;
			}
			set
			{
				if ((this._MyShowId != value))
				{
					if (this._MyShow.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMyShowIdChanging(value);
					this.SendPropertyChanging();
					this._MyShowId = value;
					this.SendPropertyChanged("MyShowId");
					this.OnMyShowIdChanged();
				}
			}
		}
		
		[Column(Storage="_ArtId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ArtId
		{
			get
			{
				return this._ArtId;
			}
			set
			{
				if ((this._ArtId != value))
				{
					if (this._Art.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArtIdChanging(value);
					this.SendPropertyChanging();
					this._ArtId = value;
					this.SendPropertyChanged("ArtId");
					this.OnArtIdChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_UpdatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_DeletedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeletedDate
		{
			get
			{
				return this._DeletedDate;
			}
			set
			{
				if ((this._DeletedDate != value))
				{
					this.OnDeletedDateChanging(value);
					this.SendPropertyChanging();
					this._DeletedDate = value;
					this.SendPropertyChanged("DeletedDate");
					this.OnDeletedDateChanged();
				}
			}
		}
		
		[Column(Storage="_Deleted", DbType="Bit NOT NULL")]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[Association(Name="Art_MyShowArt", Storage="_Art", ThisKey="ArtId", OtherKey="ArtId", IsForeignKey=true)]
		public Art Art
		{
			get
			{
				return this._Art.Entity;
			}
			set
			{
				Art previousValue = this._Art.Entity;
				if (((previousValue != value) 
							|| (this._Art.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Art.Entity = null;
						previousValue.MyShowArts.Remove(this);
					}
					this._Art.Entity = value;
					if ((value != null))
					{
						value.MyShowArts.Add(this);
						this._ArtId = value.ArtId;
					}
					else
					{
						this._ArtId = default(System.Guid);
					}
					this.SendPropertyChanged("Art");
				}
			}
		}
		
		[Association(Name="MyShow_MyShowArt", Storage="_MyShow", ThisKey="MyShowId", OtherKey="MyShowId", IsForeignKey=true)]
		public MyShow MyShow
		{
			get
			{
				return this._MyShow.Entity;
			}
			set
			{
				MyShow previousValue = this._MyShow.Entity;
				if (((previousValue != value) 
							|| (this._MyShow.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MyShow.Entity = null;
						previousValue.MyShowArts.Remove(this);
					}
					this._MyShow.Entity = value;
					if ((value != null))
					{
						value.MyShowArts.Add(this);
						this._MyShowId = value.MyShowId;
					}
					else
					{
						this._MyShowId = default(System.Guid);
					}
					this.SendPropertyChanged("MyShow");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Analysis")]
	public partial class Analysis : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _AnalysisId;
		
		private System.Guid _SetSongId;
		
		private System.Guid _UserId;
		
		private System.Nullable<System.Guid> _MyShowId;
		
		private System.Nullable<int> _Rating;
		
		private string _Notes;
		
		private System.DateTime _CreatedDate;
		
		private System.Nullable<System.DateTime> _UpdatedDate;
		
		private System.Nullable<System.DateTime> _DeletedDate;
		
		private bool _Deleted;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAnalysisIdChanging(System.Guid value);
    partial void OnAnalysisIdChanged();
    partial void OnSetSongIdChanging(System.Guid value);
    partial void OnSetSongIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnMyShowIdChanging(System.Nullable<System.Guid> value);
    partial void OnMyShowIdChanged();
    partial void OnRatingChanging(System.Nullable<int> value);
    partial void OnRatingChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedDateChanged();
    partial void OnDeletedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedDateChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    #endregion
		
		public Analysis()
		{
			OnCreated();
		}
		
		[Column(Storage="_AnalysisId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AnalysisId
		{
			get
			{
				return this._AnalysisId;
			}
			set
			{
				if ((this._AnalysisId != value))
				{
					this.OnAnalysisIdChanging(value);
					this.SendPropertyChanging();
					this._AnalysisId = value;
					this.SendPropertyChanged("AnalysisId");
					this.OnAnalysisIdChanged();
				}
			}
		}
		
		[Column(Storage="_SetSongId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SetSongId
		{
			get
			{
				return this._SetSongId;
			}
			set
			{
				if ((this._SetSongId != value))
				{
					this.OnSetSongIdChanging(value);
					this.SendPropertyChanging();
					this._SetSongId = value;
					this.SendPropertyChanged("SetSongId");
					this.OnSetSongIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_MyShowId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> MyShowId
		{
			get
			{
				return this._MyShowId;
			}
			set
			{
				if ((this._MyShowId != value))
				{
					this.OnMyShowIdChanging(value);
					this.SendPropertyChanging();
					this._MyShowId = value;
					this.SendPropertyChanged("MyShowId");
					this.OnMyShowIdChanged();
				}
			}
		}
		
		[Column(Storage="_Rating", DbType="Int")]
		public System.Nullable<int> Rating
		{
			get
			{
				return this._Rating;
			}
			set
			{
				if ((this._Rating != value))
				{
					this.OnRatingChanging(value);
					this.SendPropertyChanging();
					this._Rating = value;
					this.SendPropertyChanged("Rating");
					this.OnRatingChanged();
				}
			}
		}
		
		[Column(Storage="_Notes", DbType="NVarChar(MAX)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_UpdatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_DeletedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeletedDate
		{
			get
			{
				return this._DeletedDate;
			}
			set
			{
				if ((this._DeletedDate != value))
				{
					this.OnDeletedDateChanging(value);
					this.SendPropertyChanging();
					this._DeletedDate = value;
					this.SendPropertyChanged("DeletedDate");
					this.OnDeletedDateChanged();
				}
			}
		}
		
		[Column(Storage="_Deleted", DbType="Bit NOT NULL")]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.WantedList")]
	public partial class WantedList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _WantedId;
		
		private System.Nullable<System.DateTime> _FulfilledDate;
		
		private System.DateTime _CreatedDate;
		
		private bool _Archive;
		
		private System.Guid _UserId;
		
		private System.Nullable<System.DateTime> _UpdatedDate;
		
		private System.Nullable<System.DateTime> _DeletedDate;
		
		private bool _Deleted;
		
		private System.Guid _SongId;
		
		private int _Rank;
		
		private System.Nullable<System.Guid> _SetSongId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWantedIdChanging(System.Guid value);
    partial void OnWantedIdChanged();
    partial void OnFulfilledDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFulfilledDateChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnArchiveChanging(bool value);
    partial void OnArchiveChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedDateChanged();
    partial void OnDeletedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedDateChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    partial void OnSongIdChanging(System.Guid value);
    partial void OnSongIdChanged();
    partial void OnRankChanging(int value);
    partial void OnRankChanged();
    partial void OnSetSongIdChanging(System.Nullable<System.Guid> value);
    partial void OnSetSongIdChanged();
    #endregion
		
		public WantedList()
		{
			OnCreated();
		}
		
		[Column(Storage="_WantedId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid WantedId
		{
			get
			{
				return this._WantedId;
			}
			set
			{
				if ((this._WantedId != value))
				{
					this.OnWantedIdChanging(value);
					this.SendPropertyChanging();
					this._WantedId = value;
					this.SendPropertyChanged("WantedId");
					this.OnWantedIdChanged();
				}
			}
		}
		
		[Column(Storage="_FulfilledDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> FulfilledDate
		{
			get
			{
				return this._FulfilledDate;
			}
			set
			{
				if ((this._FulfilledDate != value))
				{
					this.OnFulfilledDateChanging(value);
					this.SendPropertyChanging();
					this._FulfilledDate = value;
					this.SendPropertyChanged("FulfilledDate");
					this.OnFulfilledDateChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_Archive", DbType="Bit NOT NULL")]
		public bool Archive
		{
			get
			{
				return this._Archive;
			}
			set
			{
				if ((this._Archive != value))
				{
					this.OnArchiveChanging(value);
					this.SendPropertyChanging();
					this._Archive = value;
					this.SendPropertyChanged("Archive");
					this.OnArchiveChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_UpdatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_DeletedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeletedDate
		{
			get
			{
				return this._DeletedDate;
			}
			set
			{
				if ((this._DeletedDate != value))
				{
					this.OnDeletedDateChanging(value);
					this.SendPropertyChanging();
					this._DeletedDate = value;
					this.SendPropertyChanged("DeletedDate");
					this.OnDeletedDateChanged();
				}
			}
		}
		
		[Column(Storage="_Deleted", DbType="Bit NOT NULL")]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_SongId")]
		public System.Guid SongId
		{
			get
			{
				return this._SongId;
			}
			set
			{
				if ((this._SongId != value))
				{
					this.OnSongIdChanging(value);
					this.SendPropertyChanging();
					this._SongId = value;
					this.SendPropertyChanged("SongId");
					this.OnSongIdChanged();
				}
			}
		}
		
		[Column(Storage="_Rank")]
		public int Rank
		{
			get
			{
				return this._Rank;
			}
			set
			{
				if ((this._Rank != value))
				{
					this.OnRankChanging(value);
					this.SendPropertyChanging();
					this._Rank = value;
					this.SendPropertyChanged("Rank");
					this.OnRankChanged();
				}
			}
		}
		
		[Column(Storage="_SetSongId")]
		public System.Nullable<System.Guid> SetSongId
		{
			get
			{
				return this._SetSongId;
			}
			set
			{
				if ((this._SetSongId != value))
				{
					this.OnSetSongIdChanging(value);
					this.SendPropertyChanging();
					this._SetSongId = value;
					this.SendPropertyChanged("SetSongId");
					this.OnSetSongIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class yafGetRecentPostsResult
	{
		
		private int _MessageID;
		
		private int _TopicID;
		
		private System.Nullable<int> _ReplyTo;
		
		private int _Position;
		
		private int _Indent;
		
		private int _UserID;
		
		private string _UserName;
		
		private System.DateTime _Posted;
		
		private string _Message;
		
		private string _IP;
		
		private System.Nullable<System.DateTime> _Edited;
		
		private int _Flags;
		
		private string _EditReason;
		
		private bool _IsModeratorChanged;
		
		private string _DeleteReason;
		
		private System.Nullable<bool> _IsDeleted;
		
		private System.Nullable<bool> _IsApproved;
		
		private string _BlogPostID;
		
		public yafGetRecentPostsResult()
		{
		}
		
		[Column(Storage="_MessageID", DbType="Int NOT NULL")]
		public int MessageID
		{
			get
			{
				return this._MessageID;
			}
			set
			{
				if ((this._MessageID != value))
				{
					this._MessageID = value;
				}
			}
		}
		
		[Column(Storage="_TopicID", DbType="Int NOT NULL")]
		public int TopicID
		{
			get
			{
				return this._TopicID;
			}
			set
			{
				if ((this._TopicID != value))
				{
					this._TopicID = value;
				}
			}
		}
		
		[Column(Storage="_ReplyTo", DbType="Int")]
		public System.Nullable<int> ReplyTo
		{
			get
			{
				return this._ReplyTo;
			}
			set
			{
				if ((this._ReplyTo != value))
				{
					this._ReplyTo = value;
				}
			}
		}
		
		[Column(Storage="_Position", DbType="Int NOT NULL")]
		public int Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this._Position = value;
				}
			}
		}
		
		[Column(Storage="_Indent", DbType="Int NOT NULL")]
		public int Indent
		{
			get
			{
				return this._Indent;
			}
			set
			{
				if ((this._Indent != value))
				{
					this._Indent = value;
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this._UserID = value;
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(50)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this._UserName = value;
				}
			}
		}
		
		[Column(Storage="_Posted", DbType="DateTime NOT NULL")]
		public System.DateTime Posted
		{
			get
			{
				return this._Posted;
			}
			set
			{
				if ((this._Posted != value))
				{
					this._Posted = value;
				}
			}
		}
		
		[Column(Storage="_Message", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this._Message = value;
				}
			}
		}
		
		[Column(Storage="_IP", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string IP
		{
			get
			{
				return this._IP;
			}
			set
			{
				if ((this._IP != value))
				{
					this._IP = value;
				}
			}
		}
		
		[Column(Storage="_Edited", DbType="DateTime")]
		public System.Nullable<System.DateTime> Edited
		{
			get
			{
				return this._Edited;
			}
			set
			{
				if ((this._Edited != value))
				{
					this._Edited = value;
				}
			}
		}
		
		[Column(Storage="_Flags", DbType="Int NOT NULL")]
		public int Flags
		{
			get
			{
				return this._Flags;
			}
			set
			{
				if ((this._Flags != value))
				{
					this._Flags = value;
				}
			}
		}
		
		[Column(Storage="_EditReason", DbType="NVarChar(100)")]
		public string EditReason
		{
			get
			{
				return this._EditReason;
			}
			set
			{
				if ((this._EditReason != value))
				{
					this._EditReason = value;
				}
			}
		}
		
		[Column(Storage="_IsModeratorChanged", DbType="Bit NOT NULL")]
		public bool IsModeratorChanged
		{
			get
			{
				return this._IsModeratorChanged;
			}
			set
			{
				if ((this._IsModeratorChanged != value))
				{
					this._IsModeratorChanged = value;
				}
			}
		}
		
		[Column(Storage="_DeleteReason", DbType="NVarChar(100)")]
		public string DeleteReason
		{
			get
			{
				return this._DeleteReason;
			}
			set
			{
				if ((this._DeleteReason != value))
				{
					this._DeleteReason = value;
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit")]
		public System.Nullable<bool> IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this._IsDeleted = value;
				}
			}
		}
		
		[Column(Storage="_IsApproved", DbType="Bit")]
		public System.Nullable<bool> IsApproved
		{
			get
			{
				return this._IsApproved;
			}
			set
			{
				if ((this._IsApproved != value))
				{
					this._IsApproved = value;
				}
			}
		}
		
		[Column(Storage="_BlogPostID", DbType="NVarChar(50)")]
		public string BlogPostID
		{
			get
			{
				return this._BlogPostID;
			}
			set
			{
				if ((this._BlogPostID != value))
				{
					this._BlogPostID = value;
				}
			}
		}
	}
	
	public partial class yafGetRecentTopicsResult
	{
		
		private int _TopicID;
		
		private int _ForumID;
		
		private int _UserID;
		
		private string _UserName;
		
		private System.DateTime _Posted;
		
		private string _Topic;
		
		private int _Views;
		
		private short _Priority;
		
		private System.Nullable<int> _PollID;
		
		private System.Nullable<int> _TopicMovedID;
		
		private System.Nullable<System.DateTime> _LastPosted;
		
		private System.Nullable<int> _LastMessageID;
		
		private System.Nullable<int> _LastUserID;
		
		private string _LastUserName;
		
		private int _NumPosts;
		
		private int _Flags;
		
		private System.Nullable<bool> _IsDeleted;
		
		public yafGetRecentTopicsResult()
		{
		}
		
		[Column(Storage="_TopicID", DbType="Int NOT NULL")]
		public int TopicID
		{
			get
			{
				return this._TopicID;
			}
			set
			{
				if ((this._TopicID != value))
				{
					this._TopicID = value;
				}
			}
		}
		
		[Column(Storage="_ForumID", DbType="Int NOT NULL")]
		public int ForumID
		{
			get
			{
				return this._ForumID;
			}
			set
			{
				if ((this._ForumID != value))
				{
					this._ForumID = value;
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this._UserID = value;
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(50)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this._UserName = value;
				}
			}
		}
		
		[Column(Storage="_Posted", DbType="DateTime NOT NULL")]
		public System.DateTime Posted
		{
			get
			{
				return this._Posted;
			}
			set
			{
				if ((this._Posted != value))
				{
					this._Posted = value;
				}
			}
		}
		
		[Column(Storage="_Topic", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Topic
		{
			get
			{
				return this._Topic;
			}
			set
			{
				if ((this._Topic != value))
				{
					this._Topic = value;
				}
			}
		}
		
		[Column(Storage="_Views", DbType="Int NOT NULL")]
		public int Views
		{
			get
			{
				return this._Views;
			}
			set
			{
				if ((this._Views != value))
				{
					this._Views = value;
				}
			}
		}
		
		[Column(Storage="_Priority", DbType="SmallInt NOT NULL")]
		public short Priority
		{
			get
			{
				return this._Priority;
			}
			set
			{
				if ((this._Priority != value))
				{
					this._Priority = value;
				}
			}
		}
		
		[Column(Storage="_PollID", DbType="Int")]
		public System.Nullable<int> PollID
		{
			get
			{
				return this._PollID;
			}
			set
			{
				if ((this._PollID != value))
				{
					this._PollID = value;
				}
			}
		}
		
		[Column(Storage="_TopicMovedID", DbType="Int")]
		public System.Nullable<int> TopicMovedID
		{
			get
			{
				return this._TopicMovedID;
			}
			set
			{
				if ((this._TopicMovedID != value))
				{
					this._TopicMovedID = value;
				}
			}
		}
		
		[Column(Storage="_LastPosted", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastPosted
		{
			get
			{
				return this._LastPosted;
			}
			set
			{
				if ((this._LastPosted != value))
				{
					this._LastPosted = value;
				}
			}
		}
		
		[Column(Storage="_LastMessageID", DbType="Int")]
		public System.Nullable<int> LastMessageID
		{
			get
			{
				return this._LastMessageID;
			}
			set
			{
				if ((this._LastMessageID != value))
				{
					this._LastMessageID = value;
				}
			}
		}
		
		[Column(Storage="_LastUserID", DbType="Int")]
		public System.Nullable<int> LastUserID
		{
			get
			{
				return this._LastUserID;
			}
			set
			{
				if ((this._LastUserID != value))
				{
					this._LastUserID = value;
				}
			}
		}
		
		[Column(Storage="_LastUserName", DbType="NVarChar(50)")]
		public string LastUserName
		{
			get
			{
				return this._LastUserName;
			}
			set
			{
				if ((this._LastUserName != value))
				{
					this._LastUserName = value;
				}
			}
		}
		
		[Column(Storage="_NumPosts", DbType="Int NOT NULL")]
		public int NumPosts
		{
			get
			{
				return this._NumPosts;
			}
			set
			{
				if ((this._NumPosts != value))
				{
					this._NumPosts = value;
				}
			}
		}
		
		[Column(Storage="_Flags", DbType="Int NOT NULL")]
		public int Flags
		{
			get
			{
				return this._Flags;
			}
			set
			{
				if ((this._Flags != value))
				{
					this._Flags = value;
				}
			}
		}
		
		[Column(Storage="_IsDeleted", DbType="Bit")]
		public System.Nullable<bool> IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this._IsDeleted = value;
				}
			}
		}
	}
	
	public partial class profileGetFavoriteVersionsResult
	{
		
		private System.Guid _SongId;
		
		private string _SongName;
		
		private System.Nullable<short> _Order;
		
		private string _Album;
		
		private System.Nullable<double> _Length;
		
		private System.Nullable<System.Guid> _FavoriteVersionId;
		
		private System.Nullable<System.Guid> _UserId;
		
		private System.Nullable<System.Guid> _SetSongId;
		
		private System.Nullable<double> _SetSongLength;
		
		private System.Nullable<short> _SetSongOrder;
		
		private System.Nullable<System.Guid> _SetId;
		
		private System.Nullable<short> _SetNumber;
		
		private System.Nullable<bool> _Encore;
		
		private string _City;
		
		private System.Nullable<int> _ShowOrder;
		
		private System.Nullable<System.DateTime> _ShowDate;
		
		private string _ShowName;
		
		private System.Nullable<System.Guid> _ShowId;
		
		private string _State;
		
		private System.Nullable<System.Guid> _TourId;
		
		private string _VenueName;
		
		public profileGetFavoriteVersionsResult()
		{
		}
		
		[Column(Storage="_SongId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SongId
		{
			get
			{
				return this._SongId;
			}
			set
			{
				if ((this._SongId != value))
				{
					this._SongId = value;
				}
			}
		}
		
		[Column(Storage="_SongName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string SongName
		{
			get
			{
				return this._SongName;
			}
			set
			{
				if ((this._SongName != value))
				{
					this._SongName = value;
				}
			}
		}
		
		[Column(Name="[Order]", Storage="_Order", DbType="SmallInt")]
		public System.Nullable<short> Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this._Order = value;
				}
			}
		}
		
		[Column(Storage="_Album", DbType="VarChar(100)")]
		public string Album
		{
			get
			{
				return this._Album;
			}
			set
			{
				if ((this._Album != value))
				{
					this._Album = value;
				}
			}
		}
		
		[Column(Storage="_Length", DbType="Float")]
		public System.Nullable<double> Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this._Length = value;
				}
			}
		}
		
		[Column(Storage="_FavoriteVersionId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> FavoriteVersionId
		{
			get
			{
				return this._FavoriteVersionId;
			}
			set
			{
				if ((this._FavoriteVersionId != value))
				{
					this._FavoriteVersionId = value;
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this._UserId = value;
				}
			}
		}
		
		[Column(Storage="_SetSongId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> SetSongId
		{
			get
			{
				return this._SetSongId;
			}
			set
			{
				if ((this._SetSongId != value))
				{
					this._SetSongId = value;
				}
			}
		}
		
		[Column(Storage="_SetSongLength", DbType="Float")]
		public System.Nullable<double> SetSongLength
		{
			get
			{
				return this._SetSongLength;
			}
			set
			{
				if ((this._SetSongLength != value))
				{
					this._SetSongLength = value;
				}
			}
		}
		
		[Column(Storage="_SetSongOrder", DbType="SmallInt")]
		public System.Nullable<short> SetSongOrder
		{
			get
			{
				return this._SetSongOrder;
			}
			set
			{
				if ((this._SetSongOrder != value))
				{
					this._SetSongOrder = value;
				}
			}
		}
		
		[Column(Storage="_SetId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> SetId
		{
			get
			{
				return this._SetId;
			}
			set
			{
				if ((this._SetId != value))
				{
					this._SetId = value;
				}
			}
		}
		
		[Column(Storage="_SetNumber", DbType="SmallInt")]
		public System.Nullable<short> SetNumber
		{
			get
			{
				return this._SetNumber;
			}
			set
			{
				if ((this._SetNumber != value))
				{
					this._SetNumber = value;
				}
			}
		}
		
		[Column(Storage="_Encore", DbType="Bit")]
		public System.Nullable<bool> Encore
		{
			get
			{
				return this._Encore;
			}
			set
			{
				if ((this._Encore != value))
				{
					this._Encore = value;
				}
			}
		}
		
		[Column(Storage="_City", DbType="VarChar(50)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this._City = value;
				}
			}
		}
		
		[Column(Storage="_ShowOrder", DbType="Int")]
		public System.Nullable<int> ShowOrder
		{
			get
			{
				return this._ShowOrder;
			}
			set
			{
				if ((this._ShowOrder != value))
				{
					this._ShowOrder = value;
				}
			}
		}
		
		[Column(Storage="_ShowDate", DbType="Date")]
		public System.Nullable<System.DateTime> ShowDate
		{
			get
			{
				return this._ShowDate;
			}
			set
			{
				if ((this._ShowDate != value))
				{
					this._ShowDate = value;
				}
			}
		}
		
		[Column(Storage="_ShowName", DbType="VarChar(50)")]
		public string ShowName
		{
			get
			{
				return this._ShowName;
			}
			set
			{
				if ((this._ShowName != value))
				{
					this._ShowName = value;
				}
			}
		}
		
		[Column(Storage="_ShowId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ShowId
		{
			get
			{
				return this._ShowId;
			}
			set
			{
				if ((this._ShowId != value))
				{
					this._ShowId = value;
				}
			}
		}
		
		[Column(Storage="_State", DbType="Char(2)")]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this._State = value;
				}
			}
		}
		
		[Column(Storage="_TourId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> TourId
		{
			get
			{
				return this._TourId;
			}
			set
			{
				if ((this._TourId != value))
				{
					this._TourId = value;
				}
			}
		}
		
		[Column(Storage="_VenueName", DbType="VarChar(100)")]
		public string VenueName
		{
			get
			{
				return this._VenueName;
			}
			set
			{
				if ((this._VenueName != value))
				{
					this._VenueName = value;
				}
			}
		}
	}
	
	public partial class profileGetAllVersionsResult
	{
		
		private System.Guid _SetSongId;
		
		private System.Nullable<double> _SetSongLength;
		
		private System.Nullable<short> _SetSongOrder;
		
		private System.Guid _SetId;
		
		private System.Nullable<short> _SetNumber;
		
		private bool _Encore;
		
		private System.Nullable<int> _ShowOrder;
		
		private System.Nullable<System.DateTime> _ShowDate;
		
		private string _ShowName;
		
		private System.Guid _ShowId;
		
		private string _City;
		
		private string _State;
		
		private System.Nullable<System.Guid> _TourId;
		
		private string _VenueName;
		
		public profileGetAllVersionsResult()
		{
		}
		
		[Column(Storage="_SetSongId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SetSongId
		{
			get
			{
				return this._SetSongId;
			}
			set
			{
				if ((this._SetSongId != value))
				{
					this._SetSongId = value;
				}
			}
		}
		
		[Column(Storage="_SetSongLength", DbType="Float")]
		public System.Nullable<double> SetSongLength
		{
			get
			{
				return this._SetSongLength;
			}
			set
			{
				if ((this._SetSongLength != value))
				{
					this._SetSongLength = value;
				}
			}
		}
		
		[Column(Storage="_SetSongOrder", DbType="SmallInt")]
		public System.Nullable<short> SetSongOrder
		{
			get
			{
				return this._SetSongOrder;
			}
			set
			{
				if ((this._SetSongOrder != value))
				{
					this._SetSongOrder = value;
				}
			}
		}
		
		[Column(Storage="_SetId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SetId
		{
			get
			{
				return this._SetId;
			}
			set
			{
				if ((this._SetId != value))
				{
					this._SetId = value;
				}
			}
		}
		
		[Column(Storage="_SetNumber", DbType="SmallInt")]
		public System.Nullable<short> SetNumber
		{
			get
			{
				return this._SetNumber;
			}
			set
			{
				if ((this._SetNumber != value))
				{
					this._SetNumber = value;
				}
			}
		}
		
		[Column(Storage="_Encore", DbType="Bit NOT NULL")]
		public bool Encore
		{
			get
			{
				return this._Encore;
			}
			set
			{
				if ((this._Encore != value))
				{
					this._Encore = value;
				}
			}
		}
		
		[Column(Storage="_ShowOrder", DbType="Int")]
		public System.Nullable<int> ShowOrder
		{
			get
			{
				return this._ShowOrder;
			}
			set
			{
				if ((this._ShowOrder != value))
				{
					this._ShowOrder = value;
				}
			}
		}
		
		[Column(Storage="_ShowDate", DbType="Date")]
		public System.Nullable<System.DateTime> ShowDate
		{
			get
			{
				return this._ShowDate;
			}
			set
			{
				if ((this._ShowDate != value))
				{
					this._ShowDate = value;
				}
			}
		}
		
		[Column(Storage="_ShowName", DbType="VarChar(50)")]
		public string ShowName
		{
			get
			{
				return this._ShowName;
			}
			set
			{
				if ((this._ShowName != value))
				{
					this._ShowName = value;
				}
			}
		}
		
		[Column(Storage="_ShowId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ShowId
		{
			get
			{
				return this._ShowId;
			}
			set
			{
				if ((this._ShowId != value))
				{
					this._ShowId = value;
				}
			}
		}
		
		[Column(Storage="_City", DbType="VarChar(50)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this._City = value;
				}
			}
		}
		
		[Column(Storage="_State", DbType="Char(2)")]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this._State = value;
				}
			}
		}
		
		[Column(Storage="_TourId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> TourId
		{
			get
			{
				return this._TourId;
			}
			set
			{
				if ((this._TourId != value))
				{
					this._TourId = value;
				}
			}
		}
		
		[Column(Storage="_VenueName", DbType="VarChar(100)")]
		public string VenueName
		{
			get
			{
				return this._VenueName;
			}
			set
			{
				if ((this._VenueName != value))
				{
					this._VenueName = value;
				}
			}
		}
	}
	
	public partial class yafGetUserIdResult
	{
		
		private string _ProviderUserKey;
		
		public yafGetUserIdResult()
		{
		}
		
		[Column(Storage="_ProviderUserKey", DbType="NVarChar(64)")]
		public string ProviderUserKey
		{
			get
			{
				return this._ProviderUserKey;
			}
			set
			{
				if ((this._ProviderUserKey != value))
				{
					this._ProviderUserKey = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
